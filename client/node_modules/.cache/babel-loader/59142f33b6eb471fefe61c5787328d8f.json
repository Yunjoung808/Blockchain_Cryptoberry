{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/MONK/Desktop/Pro/client/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/MONK/Desktop/Pro/client/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar BigNumber = require('bignumber.js');\n\nvar Contract = require('../caver-klay-contract/src');\n\nvar _require = require('./kctHelper'),\n    validateDeployParameterForKIP17 = _require.validateDeployParameterForKIP17,\n    kip17JsonInterface = _require.kip17JsonInterface,\n    kip17ByteCode = _require.kip17ByteCode,\n    determineSendParams = _require.determineSendParams,\n    formatParamForUint256 = _require.formatParamForUint256;\n\nvar _require2 = require('../../caver-utils/src'),\n    toBuffer = _require2.toBuffer,\n    isHexStrict = _require2.isHexStrict,\n    toHex = _require2.toHex;\n\nvar _require3 = require('../../caver-utils/src'),\n    isAddress = _require3.isAddress;\n\nclass KIP17 extends Contract {\n  /**\n   * deploy deploys a KIP-17 token contract to Klaytn network.\n   * `const deployedContract = await caver.klay.KIP17.deploy({\n   *      name: 'TokenName',\n   *      symbol: 'TKN',\n   *  }, '0x{address in hex}')`\n   *\n   * @method deploy\n   * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n   * @param {String} deployer The address of the account to deploy the KIP-17 token contract.\n   * @return {Object}\n   */\n  static deploy(tokenInfo, deployer) {\n    validateDeployParameterForKIP17(tokenInfo);\n    var name = tokenInfo.name,\n        symbol = tokenInfo.symbol;\n    var kip17 = new KIP17();\n    return kip17.deploy({\n      data: kip17ByteCode,\n      arguments: [name, symbol]\n    }).send({\n      from: deployer,\n      gas: 6600000,\n      value: 0\n    });\n  }\n\n  constructor(tokenAddress, abi = kip17JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n\n  clone(tokenAddress = this.options.address) {\n    return new this.constructor(tokenAddress, this.options.jsonInterface);\n  }\n\n  supportsInterface(interfaceId) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var isSupported;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.methods.supportsInterface(interfaceId).call();\n\n            case 2:\n              isSupported = _context.sent;\n              return _context.abrupt(\"return\", isSupported);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * name returns the name of the token.\n   *\n   * @method name\n   * @return {String}\n   */\n\n\n  name() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var name;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this2.methods.name().call();\n\n            case 2:\n              name = _context2.sent;\n              return _context2.abrupt(\"return\", name);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n  /**\n   * symbol returns the symbol of the token.\n   *\n   * @method symbol\n   * @return {String}\n   */\n\n\n  symbol() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var symbol;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this3.methods.symbol().call();\n\n            case 2:\n              symbol = _context3.sent;\n              return _context3.abrupt(\"return\", symbol);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n  /**\n   * tokenURI returns the uri of the token.\n   *\n   * @method tokenURI\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {String}\n   */\n\n\n  tokenURI(tokenId) {\n    var _this4 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var tokenURI;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this4.methods.tokenURI(formatParamForUint256(tokenId)).call();\n\n            case 2:\n              tokenURI = _context4.sent;\n              return _context4.abrupt(\"return\", tokenURI);\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  }\n  /**\n   * totalSupply returns the total amount of tokens stored by the contract.\n   *\n   * @method totalSupply\n   * @return {BigNumber}\n   */\n\n\n  totalSupply() {\n    var _this5 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var totalSupply;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this5.methods.totalSupply().call();\n\n            case 2:\n              totalSupply = _context5.sent;\n              return _context5.abrupt(\"return\", new BigNumber(totalSupply));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  }\n  /**\n   * tokenOfOwnerByIndex returns the token id at a given index of the tokens list of the requested owner.\n   *\n   * @method tokenOfOwnerByIndex\n   * @param {String} owner The address of the account whose token you want to query.\n   * @param {BigNumber|String|Number} index The index of the token to be searched among the tokens owned by a owner account.\n   * @return {BigNumber}\n   */\n\n\n  tokenOfOwnerByIndex(owner, index) {\n    var _this6 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var token;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _this6.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call();\n\n            case 2:\n              token = _context6.sent;\n              return _context6.abrupt(\"return\", new BigNumber(token));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  }\n  /**\n   * tokenByIndex returns the token id at a given index of all the tokens in this contract.\n   *\n   * @method tokenByIndex\n   * @param {BigNumber|String|Number} index The index of the token to query.\n   * @return {BigNumber}\n   */\n\n\n  tokenByIndex(index) {\n    var _this7 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var token;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _this7.methods.tokenByIndex(formatParamForUint256(index)).call();\n\n            case 2:\n              token = _context7.sent;\n              return _context7.abrupt(\"return\", new BigNumber(token));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  }\n  /**\n   * balanceOf returns the balance of the specified address.\n   * The balance of an account in KIP-17 means that the total number of NFT(Non Fungible Token) owned by the account.\n   *\n   * @method balanceOf\n   * @param {String} account The address of the account whose number of tokens you want to see.\n   * @return {BigNumber}\n   */\n\n\n  balanceOf(account) {\n    var _this8 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var balance;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _this8.methods.balanceOf(account).call();\n\n            case 2:\n              balance = _context8.sent;\n              return _context8.abrupt(\"return\", new BigNumber(balance));\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  }\n  /**\n   * ownerOf returns the owner of the specified token id.\n   *\n   * @method ownerOf\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {BigNumber}\n   */\n\n\n  ownerOf(tokenId) {\n    var _this9 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var owner;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _this9.methods.ownerOf(formatParamForUint256(tokenId)).call();\n\n            case 2:\n              owner = _context9.sent;\n              return _context9.abrupt(\"return\", owner);\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }))();\n  }\n  /**\n   * getApproved returns the approved address for a token id, or zero if no address set.\n   *\n   * @method getApproved\n   * @param {BigNumber|String|Number} tokenId The id of the token.\n   * @return {Boolean}\n   */\n\n\n  getApproved(tokenId) {\n    var _this10 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var isApproved;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _this10.methods.getApproved(formatParamForUint256(tokenId)).call();\n\n            case 2:\n              isApproved = _context10.sent;\n              return _context10.abrupt(\"return\", isApproved);\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  }\n  /**\n   * isApprovedForAll returns true if an operator is approved by a given owner.\n   *\n   * @method isApprovedForAll\n   * @param {String} owner The id of the token.\n   * @param {String} operator The id of the token.\n   * @return {Boolean}\n   */\n\n\n  isApprovedForAll(owner, operator) {\n    var _this11 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var isApprovedForAll;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              _context11.next = 2;\n              return _this11.methods.isApprovedForAll(owner, operator).call();\n\n            case 2:\n              isApprovedForAll = _context11.sent;\n              return _context11.abrupt(\"return\", isApprovedForAll);\n\n            case 4:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }))();\n  }\n  /**\n   * isMinter returns whether the account is minter or not.\n   *\n   * @method isMinter\n   * @param {String} account The address of the account you want to check minter or not.\n   * @return {Boolean}\n   */\n\n\n  isMinter(account) {\n    var _this12 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var isMinter;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              _context12.next = 2;\n              return _this12.methods.isMinter(account).call();\n\n            case 2:\n              isMinter = _context12.sent;\n              return _context12.abrupt(\"return\", isMinter);\n\n            case 4:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }))();\n  }\n  /**\n   * paused returns whether or not the token contract's transaction is paused.\n   *\n   * @method paused\n   * @return {Boolean}\n   */\n\n\n  paused() {\n    var _this13 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var isPaused;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              _context13.next = 2;\n              return _this13.methods.paused().call();\n\n            case 2:\n              isPaused = _context13.sent;\n              return _context13.abrupt(\"return\", isPaused);\n\n            case 4:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }))();\n  }\n  /**\n   * isPauser returns whether the account is pauser or not.\n   *\n   * @method isPauser\n   * @param {String} account The address of the account you want to check pauser or not.\n   * @return {Boolean}\n   */\n\n\n  isPauser(account) {\n    var _this14 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var isPauser;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return _this14.methods.isPauser(account).call();\n\n            case 2:\n              isPauser = _context14.sent;\n              return _context14.abrupt(\"return\", isPauser);\n\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }))();\n  }\n  /**\n   * approve sets approval with another address to transfer the given token id.\n   *\n   * @method approve\n   * @param {String} to The address of the account to use on behalf of owner for the tokenId.\n   * @param {BigNumber|String|Number} tokenId The id of token the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  approve(to, tokenId, sendParam = {}) {\n    var _this15 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              executableObj = _this15.methods.approve(to, formatParamForUint256(tokenId));\n              _context15.next = 3;\n              return determineSendParams(executableObj, sendParam, _this15.options.from);\n\n            case 3:\n              sendParam = _context15.sent;\n              return _context15.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }))();\n  }\n  /**\n   * setApprovalForAll sets or unsets the approval of a given operator.\n   * An operator is allowed to transfer all tokens of the sender on their behalf.\n   *\n   * @method setApprovalForAll\n   * @param {String} to The address of an account to allow/forbid for transfer of all tokens owned by the owner on behalf of the owner.\n   * @param {Boolean} approved Whether to allow sending tokens on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  setApprovalForAll(to, approved, sendParam = {}) {\n    var _this16 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              executableObj = _this16.methods.setApprovalForAll(to, approved);\n              _context16.next = 3;\n              return determineSendParams(executableObj, sendParam, _this16.options.from);\n\n            case 3:\n              sendParam = _context16.sent;\n              return _context16.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }))();\n  }\n  /**\n   * transferFrom transfers the ownership of a given token id to another address.\n   *\n   * @method transferFrom\n   * @param {String} from The address of the owner or approved of the given token.\n   * @param {String} to The address of the account to receive the token.\n   * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  transferFrom(from, to, tokenId, sendParam = {}) {\n    var _this17 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              executableObj = _this17.methods.transferFrom(from, to, formatParamForUint256(tokenId));\n              _context17.next = 3;\n              return determineSendParams(executableObj, sendParam, _this17.options.from);\n\n            case 3:\n              sendParam = _context17.sent;\n              return _context17.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17);\n    }))();\n  }\n  /**\n   * safeTransferFrom safely transfers the ownership of a given token id to another address.\n   *\n   * @method safeTransferFrom\n   * @param {String} from The address of the owner or approved of the given token.\n   * @param {String} to The address of the account to receive the token.\n   * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  safeTransferFrom(from, to, tokenId, data, sendParam = {}) {\n    var _this18 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              if (!(data && _.isObject(data))) {\n                _context18.next = 6;\n                break;\n              }\n\n              if (!(data.gas !== undefined || data.from !== undefined)) {\n                _context18.next = 6;\n                break;\n              }\n\n              if (!(Object.keys(sendParam).length > 0)) {\n                _context18.next = 4;\n                break;\n              }\n\n              throw new Error(\"Invalid parameters\");\n\n            case 4:\n              sendParam = data;\n              data = undefined;\n\n            case 6:\n              if (data && !_.isBuffer(data)) {\n                if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                data = toBuffer(data);\n              }\n\n              executableObj = data ? _this18.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data) : _this18.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId));\n              _context18.next = 10;\n              return determineSendParams(executableObj, sendParam, _this18.options.from);\n\n            case 10:\n              sendParam = _context18.sent;\n              return _context18.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 12:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18);\n    }))();\n  }\n  /**\n   * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method addMinter\n   * @param {String} account The address of account to add as minter.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  addMinter(account, sendParam = {}) {\n    var _this19 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              executableObj = _this19.methods.addMinter(account);\n              _context19.next = 3;\n              return determineSendParams(executableObj, sendParam, _this19.options.from);\n\n            case 3:\n              sendParam = _context19.sent;\n              return _context19.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }))();\n  }\n  /**\n   * renounceMinter renounces privilege of MinterRole.\n   * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n   *\n   * @method renounceMinter\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  renounceMinter(sendParam = {}) {\n    var _this20 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              executableObj = _this20.methods.renounceMinter();\n              _context20.next = 3;\n              return determineSendParams(executableObj, sendParam, _this20.options.from);\n\n            case 3:\n              sendParam = _context20.sent;\n              return _context20.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }))();\n  }\n  /**\n   * mint creates token and assigns them to account, increasing the total supply.\n   *\n   * @method mint\n   * @param {String} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} tokenId The id of token to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  mint(to, tokenId, sendParam = {}) {\n    var _this21 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              executableObj = _this21.methods.mint(to, formatParamForUint256(tokenId));\n              _context21.next = 3;\n              return determineSendParams(executableObj, sendParam, _this21.options.from);\n\n            case 3:\n              sendParam = _context21.sent;\n              return _context21.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }))();\n  }\n  /**\n   * mintWithTokenURI creates token with uri and assigns them to account, increasing the total supply.\n   *\n   * @method mintWithTokenURI\n   * @param {String} to The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} tokenId The id of token to mint.\n   * @param {String} tokenURI The uri of token to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  mintWithTokenURI(to, tokenId, tokenURI, sendParam = {}) {\n    var _this22 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              executableObj = _this22.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI);\n              _context22.next = 3;\n              return determineSendParams(executableObj, sendParam, _this22.options.from);\n\n            case 3:\n              sendParam = _context22.sent;\n              return _context22.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22);\n    }))();\n  }\n  /**\n   * burn destroys a specific KIP-17 token.\n   *\n   * @method burn\n   * @param {BigNumber|String|Number} tokenId The id of token to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  burn(tokenId, sendParam = {}) {\n    var _this23 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              executableObj = _this23.methods.burn(formatParamForUint256(tokenId));\n              _context23.next = 3;\n              return determineSendParams(executableObj, sendParam, _this23.options.from);\n\n            case 3:\n              sendParam = _context23.sent;\n              return _context23.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23);\n    }))();\n  }\n  /**\n   * pause triggers stopped state that stops sending tokens in emergency situation.\n   * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n   *\n   * @method pause\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  pause(sendParam = {}) {\n    var _this24 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              executableObj = _this24.methods.pause();\n              _context24.next = 3;\n              return determineSendParams(executableObj, sendParam, _this24.options.from);\n\n            case 3:\n              sendParam = _context24.sent;\n              return _context24.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24);\n    }))();\n  }\n  /**\n   * unpause sets amount as the allowance of spender over the caller’s tokens.\n   * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n   *\n   * @method unpause\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  unpause(sendParam = {}) {\n    var _this25 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n        while (1) {\n          switch (_context25.prev = _context25.next) {\n            case 0:\n              executableObj = _this25.methods.unpause();\n              _context25.next = 3;\n              return determineSendParams(executableObj, sendParam, _this25.options.from);\n\n            case 3:\n              sendParam = _context25.sent;\n              return _context25.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context25.stop();\n          }\n        }\n      }, _callee25);\n    }))();\n  }\n  /**\n   * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n   * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n   *\n   * @method addPauser\n   * @param {String} account The address of account to add as pauser.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  addPauser(account, sendParam = {}) {\n    var _this26 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee26() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee26$(_context26) {\n        while (1) {\n          switch (_context26.prev = _context26.next) {\n            case 0:\n              executableObj = _this26.methods.addPauser(account);\n              _context26.next = 3;\n              return determineSendParams(executableObj, sendParam, _this26.options.from);\n\n            case 3:\n              sendParam = _context26.sent;\n              return _context26.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context26.stop();\n          }\n        }\n      }, _callee26);\n    }))();\n  }\n  /**\n   * renouncePauser renounces privilege of PauserRole.\n   * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n   *\n   * @method renouncePauser\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n   */\n\n\n  renouncePauser(sendParam = {}) {\n    var _this27 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee27() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee27$(_context27) {\n        while (1) {\n          switch (_context27.prev = _context27.next) {\n            case 0:\n              executableObj = _this27.methods.renouncePauser();\n              _context27.next = 3;\n              return determineSendParams(executableObj, sendParam, _this27.options.from);\n\n            case 3:\n              sendParam = _context27.sent;\n              return _context27.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context27.stop();\n          }\n        }\n      }, _callee27);\n    }))();\n  }\n\n}\n\nmodule.exports = KIP17;","map":{"version":3,"sources":["C:/Users/MONK/Desktop/Pro/client/node_modules/caver-js/packages/caver-klay/caver-klay-kct/kip17.js"],"names":["_","require","BigNumber","Contract","validateDeployParameterForKIP17","kip17JsonInterface","kip17ByteCode","determineSendParams","formatParamForUint256","toBuffer","isHexStrict","toHex","isAddress","KIP17","deploy","tokenInfo","deployer","name","symbol","kip17","data","arguments","send","from","gas","value","constructor","tokenAddress","abi","isString","Error","undefined","clone","options","address","jsonInterface","supportsInterface","interfaceId","methods","call","isSupported","tokenURI","tokenId","totalSupply","tokenOfOwnerByIndex","owner","index","token","tokenByIndex","balanceOf","account","balance","ownerOf","getApproved","isApproved","isApprovedForAll","operator","isMinter","paused","isPaused","isPauser","approve","to","sendParam","executableObj","setApprovalForAll","approved","transferFrom","safeTransferFrom","isObject","Object","keys","length","isBuffer","addMinter","renounceMinter","mint","mintWithTokenURI","burn","pause","unpause","addPauser","renouncePauser","module","exports"],"mappings":";;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMC,SAAS,GAAGD,OAAO,CAAC,cAAD,CAAzB;;AAEA,IAAME,QAAQ,GAAGF,OAAO,CAAC,4BAAD,CAAxB;;eAOIA,OAAO,CAAC,aAAD,C;IALPG,+B,YAAAA,+B;IACAC,kB,YAAAA,kB;IACAC,a,YAAAA,a;IACAC,mB,YAAAA,mB;IACAC,qB,YAAAA,qB;;gBAEqCP,OAAO,CAAC,uBAAD,C;IAAxCQ,Q,aAAAA,Q;IAAUC,W,aAAAA,W;IAAaC,K,aAAAA,K;;gBACTV,OAAO,CAAC,uBAAD,C;IAArBW,S,aAAAA,S;;AAER,MAAMC,KAAN,SAAoBV,QAApB,CAA6B;AACzB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACI,SAAOW,MAAP,CAAcC,SAAd,EAAyBC,QAAzB,EAAmC;AAC/BZ,IAAAA,+BAA+B,CAACW,SAAD,CAA/B;AAD+B,QAGvBE,IAHuB,GAGNF,SAHM,CAGvBE,IAHuB;AAAA,QAGjBC,MAHiB,GAGNH,SAHM,CAGjBG,MAHiB;AAI/B,QAAMC,KAAK,GAAG,IAAIN,KAAJ,EAAd;AAEA,WAAOM,KAAK,CACPL,MADE,CACK;AACJM,MAAAA,IAAI,EAAEd,aADF;AAEJe,MAAAA,SAAS,EAAE,CAACJ,IAAD,EAAOC,MAAP;AAFP,KADL,EAKFI,IALE,CAKG;AAAEC,MAAAA,IAAI,EAAEP,QAAR;AAAkBQ,MAAAA,GAAG,EAAE,OAAvB;AAAgCC,MAAAA,KAAK,EAAE;AAAvC,KALH,CAAP;AAMH;;AAEDC,EAAAA,WAAW,CAACC,YAAD,EAAeC,GAAG,GAAGvB,kBAArB,EAAyC;AAChD,QAAIsB,YAAJ,EAAkB;AACd,UAAI3B,CAAC,CAAC6B,QAAF,CAAWF,YAAX,CAAJ,EAA8B;AAC1B,YAAI,CAACf,SAAS,CAACe,YAAD,CAAd,EAA8B,MAAM,IAAIG,KAAJ,iCAAmCH,YAAnC,EAAN;AACjC,OAFD,MAEO;AACHC,QAAAA,GAAG,GAAGD,YAAN;AACAA,QAAAA,YAAY,GAAGI,SAAf;AACH;AACJ;;AACD,UAAMH,GAAN,EAAWD,YAAX;AACH;;AAEDK,EAAAA,KAAK,CAACL,YAAY,GAAG,KAAKM,OAAL,CAAaC,OAA7B,EAAsC;AACvC,WAAO,IAAI,KAAKR,WAAT,CAAqBC,YAArB,EAAmC,KAAKM,OAAL,CAAaE,aAAhD,CAAP;AACH;;AAEKC,EAAAA,iBAAN,CAAwBC,WAAxB,EAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACP,KAAI,CAACC,OAAL,CAAaF,iBAAb,CAA+BC,WAA/B,EAA4CE,IAA5C,EADO;;AAAA;AAC3BC,cAAAA,WAD2B;AAAA,+CAE1BA,WAF0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGpC;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACUvB,EAAAA,IAAN,GAAa;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACU,MAAI,CAACqB,OAAL,CAAarB,IAAb,GAAoBsB,IAApB,EADV;;AAAA;AACHtB,cAAAA,IADG;AAAA,gDAEFA,IAFE;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGZ;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,MAAN,GAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACU,MAAI,CAACoB,OAAL,CAAapB,MAAb,GAAsBqB,IAAtB,EADV;;AAAA;AACLrB,cAAAA,MADK;AAAA,gDAEJA,MAFI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGd;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUuB,EAAAA,QAAN,CAAeC,OAAf,EAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACG,MAAI,CAACJ,OAAL,CAAaG,QAAb,CAAsBjC,qBAAqB,CAACkC,OAAD,CAA3C,EAAsDH,IAAtD,EADH;;AAAA;AACdE,cAAAA,QADc;AAAA,gDAEbA,QAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGvB;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,WAAN,GAAoB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACU,MAAI,CAACL,OAAL,CAAaK,WAAb,GAA2BJ,IAA3B,EADV;;AAAA;AACVI,cAAAA,WADU;AAAA,gDAET,IAAIzC,SAAJ,CAAcyC,WAAd,CAFS;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGnB;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,mBAAN,CAA0BC,KAA1B,EAAiCC,KAAjC,EAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBAChB,MAAI,CAACR,OAAL,CAAaM,mBAAb,CAAiCC,KAAjC,EAAwCrC,qBAAqB,CAACsC,KAAD,CAA7D,EAAsEP,IAAtE,EADgB;;AAAA;AAC9BQ,cAAAA,KAD8B;AAAA,gDAE7B,IAAI7C,SAAJ,CAAc6C,KAAd,CAF6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGvC;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,YAAN,CAAmBF,KAAnB,EAA0B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACF,MAAI,CAACR,OAAL,CAAaU,YAAb,CAA0BxC,qBAAqB,CAACsC,KAAD,CAA/C,EAAwDP,IAAxD,EADE;;AAAA;AAChBQ,cAAAA,KADgB;AAAA,gDAEf,IAAI7C,SAAJ,CAAc6C,KAAd,CAFe;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGzB;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,SAAN,CAAgBC,OAAhB,EAAyB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,MAAI,CAACZ,OAAL,CAAaW,SAAb,CAAuBC,OAAvB,EAAgCX,IAAhC,EADD;;AAAA;AACfY,cAAAA,OADe;AAAA,gDAEd,IAAIjD,SAAJ,CAAciD,OAAd,CAFc;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGxB;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,OAAN,CAAcV,OAAd,EAAuB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACC,MAAI,CAACJ,OAAL,CAAac,OAAb,CAAqB5C,qBAAqB,CAACkC,OAAD,CAA1C,EAAqDH,IAArD,EADD;;AAAA;AACbM,cAAAA,KADa;AAAA,gDAEZA,KAFY;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGtB;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUQ,EAAAA,WAAN,CAAkBX,OAAlB,EAA2B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACE,OAAI,CAACJ,OAAL,CAAae,WAAb,CAAyB7C,qBAAqB,CAACkC,OAAD,CAA9C,EAAyDH,IAAzD,EADF;;AAAA;AACjBe,cAAAA,UADiB;AAAA,iDAEhBA,UAFgB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAG1B;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,gBAAN,CAAuBV,KAAvB,EAA8BW,QAA9B,EAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACL,OAAI,CAAClB,OAAL,CAAaiB,gBAAb,CAA8BV,KAA9B,EAAqCW,QAArC,EAA+CjB,IAA/C,EADK;;AAAA;AAC9BgB,cAAAA,gBAD8B;AAAA,iDAE7BA,gBAF6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGvC;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,QAAN,CAAeP,OAAf,EAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACG,OAAI,CAACZ,OAAL,CAAamB,QAAb,CAAsBP,OAAtB,EAA+BX,IAA/B,EADH;;AAAA;AACdkB,cAAAA,QADc;AAAA,iDAEbA,QAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGvB;AAED;AACJ;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,MAAN,GAAe;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACY,OAAI,CAACpB,OAAL,CAAaoB,MAAb,GAAsBnB,IAAtB,EADZ;;AAAA;AACLoB,cAAAA,QADK;AAAA,iDAEJA,QAFI;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGd;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,QAAN,CAAeV,OAAf,EAAwB;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,qBACG,OAAI,CAACZ,OAAL,CAAasB,QAAb,CAAsBV,OAAtB,EAA+BX,IAA/B,EADH;;AAAA;AACdqB,cAAAA,QADc;AAAA,iDAEbA,QAFa;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGvB;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUC,EAAAA,OAAN,CAAcC,EAAd,EAAkBpB,OAAlB,EAA2BqB,SAAS,GAAG,EAAvC,EAA2C;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACjCC,cAAAA,aADiC,GACjB,OAAI,CAAC1B,OAAL,CAAauB,OAAb,CAAqBC,EAArB,EAAyBtD,qBAAqB,CAACkC,OAAD,CAA9C,CADiB;AAAA;AAAA,qBAErBnC,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFE;;AAAA;AAEvCwC,cAAAA,SAFuC;AAAA,iDAIhCC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJgC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK1C;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUE,EAAAA,iBAAN,CAAwBH,EAAxB,EAA4BI,QAA5B,EAAsCH,SAAS,GAAG,EAAlD,EAAsD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5CC,cAAAA,aAD4C,GAC5B,OAAI,CAAC1B,OAAL,CAAa2B,iBAAb,CAA+BH,EAA/B,EAAmCI,QAAnC,CAD4B;AAAA;AAAA,qBAEhC3D,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFa;;AAAA;AAElDwC,cAAAA,SAFkD;AAAA,iDAI3CC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJ2C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKrD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUI,EAAAA,YAAN,CAAmB5C,IAAnB,EAAyBuC,EAAzB,EAA6BpB,OAA7B,EAAsCqB,SAAS,GAAG,EAAlD,EAAsD;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC5CC,cAAAA,aAD4C,GAC5B,OAAI,CAAC1B,OAAL,CAAa6B,YAAb,CAA0B5C,IAA1B,EAAgCuC,EAAhC,EAAoCtD,qBAAqB,CAACkC,OAAD,CAAzD,CAD4B;AAAA;AAAA,qBAEhCnC,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFa;;AAAA;AAElDwC,cAAAA,SAFkD;AAAA,iDAI3CC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJ2C;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKrD;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUK,EAAAA,gBAAN,CAAuB7C,IAAvB,EAA6BuC,EAA7B,EAAiCpB,OAAjC,EAA0CtB,IAA1C,EAAgD2C,SAAS,GAAG,EAA5D,EAAgE;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACxD3C,IAAI,IAAIpB,CAAC,CAACqE,QAAF,CAAWjD,IAAX,CADgD;AAAA;AAAA;AAAA;;AAAA,oBAEpDA,IAAI,CAACI,GAAL,KAAaO,SAAb,IAA0BX,IAAI,CAACG,IAAL,KAAcQ,SAFY;AAAA;AAAA;AAAA;;AAAA,oBAGhDuC,MAAM,CAACC,IAAP,CAAYR,SAAZ,EAAuBS,MAAvB,GAAgC,CAHgB;AAAA;AAAA;AAAA;;AAAA,oBAGP,IAAI1C,KAAJ,sBAHO;;AAAA;AAIpDiC,cAAAA,SAAS,GAAG3C,IAAZ;AACAA,cAAAA,IAAI,GAAGW,SAAP;;AALoD;AAS5D,kBAAIX,IAAI,IAAI,CAACpB,CAAC,CAACyE,QAAF,CAAWrD,IAAX,CAAb,EAA+B;AAC3B,oBAAIpB,CAAC,CAAC6B,QAAF,CAAWT,IAAX,KAAoB,CAACV,WAAW,CAACU,IAAD,CAApC,EAA4CA,IAAI,GAAGT,KAAK,CAACS,IAAD,CAAZ;AAC5CA,gBAAAA,IAAI,GAAGX,QAAQ,CAACW,IAAD,CAAf;AACH;;AAEK4C,cAAAA,aAdsD,GActC5C,IAAI,GACpB,OAAI,CAACkB,OAAL,CAAa8B,gBAAb,CAA8B7C,IAA9B,EAAoCuC,EAApC,EAAwCtD,qBAAqB,CAACkC,OAAD,CAA7D,EAAwEtB,IAAxE,CADoB,GAEpB,OAAI,CAACkB,OAAL,CAAa8B,gBAAb,CAA8B7C,IAA9B,EAAoCuC,EAApC,EAAwCtD,qBAAqB,CAACkC,OAAD,CAA7D,CAhBsD;AAAA;AAAA,qBAkB1CnC,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAlBuB;;AAAA;AAkB5DwC,cAAAA,SAlB4D;AAAA,iDAoBrDC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CApBqD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAqB/D;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUW,EAAAA,SAAN,CAAgBxB,OAAhB,EAAyBa,SAAS,GAAG,EAArC,EAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BC,cAAAA,aAD+B,GACf,OAAI,CAAC1B,OAAL,CAAaoC,SAAb,CAAuBxB,OAAvB,CADe;AAAA;AAAA,qBAEnB3C,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFA;;AAAA;AAErCwC,cAAAA,SAFqC;AAAA,iDAI9BC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJ8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKxC;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUY,EAAAA,cAAN,CAAqBZ,SAAS,GAAG,EAAjC,EAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,cAAAA,aAD2B,GACX,OAAI,CAAC1B,OAAL,CAAaqC,cAAb,EADW;AAAA;AAAA,qBAEfpE,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFJ;;AAAA;AAEjCwC,cAAAA,SAFiC;AAAA,iDAI1BC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJ0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKpC;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUa,EAAAA,IAAN,CAAWd,EAAX,EAAepB,OAAf,EAAwBqB,SAAS,GAAG,EAApC,EAAwC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC9BC,cAAAA,aAD8B,GACd,OAAI,CAAC1B,OAAL,CAAasC,IAAb,CAAkBd,EAAlB,EAAsBtD,qBAAqB,CAACkC,OAAD,CAA3C,CADc;AAAA;AAAA,qBAElBnC,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFD;;AAAA;AAEpCwC,cAAAA,SAFoC;AAAA,iDAI7BC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJ6B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKvC;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUc,EAAAA,gBAAN,CAAuBf,EAAvB,EAA2BpB,OAA3B,EAAoCD,QAApC,EAA8CsB,SAAS,GAAG,EAA1D,EAA8D;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACpDC,cAAAA,aADoD,GACpC,OAAI,CAAC1B,OAAL,CAAauC,gBAAb,CAA8Bf,EAA9B,EAAkCtD,qBAAqB,CAACkC,OAAD,CAAvD,EAAkED,QAAlE,CADoC;AAAA;AAAA,qBAExClC,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFqB;;AAAA;AAE1DwC,cAAAA,SAF0D;AAAA,iDAInDC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJmD;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK7D;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUe,EAAAA,IAAN,CAAWpC,OAAX,EAAoBqB,SAAS,GAAG,EAAhC,EAAoC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC1BC,cAAAA,aAD0B,GACV,OAAI,CAAC1B,OAAL,CAAawC,IAAb,CAAkBtE,qBAAqB,CAACkC,OAAD,CAAvC,CADU;AAAA;AAAA,qBAEdnC,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFL;;AAAA;AAEhCwC,cAAAA,SAFgC;AAAA,iDAIzBC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJyB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKnC;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUgB,EAAAA,KAAN,CAAYhB,SAAS,GAAG,EAAxB,EAA4B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAClBC,cAAAA,aADkB,GACF,OAAI,CAAC1B,OAAL,CAAayC,KAAb,EADE;AAAA;AAAA,qBAENxE,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFb;;AAAA;AAExBwC,cAAAA,SAFwB;AAAA,iDAIjBC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJiB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK3B;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUiB,EAAAA,OAAN,CAAcjB,SAAS,GAAG,EAA1B,EAA8B;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACpBC,cAAAA,aADoB,GACJ,OAAI,CAAC1B,OAAL,CAAa0C,OAAb,EADI;AAAA;AAAA,qBAERzE,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFX;;AAAA;AAE1BwC,cAAAA,SAF0B;AAAA,iDAInBC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJmB;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAK7B;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUkB,EAAAA,SAAN,CAAgB/B,OAAhB,EAAyBa,SAAS,GAAG,EAArC,EAAyC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC/BC,cAAAA,aAD+B,GACf,OAAI,CAAC1B,OAAL,CAAa2C,SAAb,CAAuB/B,OAAvB,CADe;AAAA;AAAA,qBAEnB3C,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFA;;AAAA;AAErCwC,cAAAA,SAFqC;AAAA,iDAI9BC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJ8B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKxC;AAED;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACUmB,EAAAA,cAAN,CAAqBnB,SAAS,GAAG,EAAjC,EAAqC;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAC3BC,cAAAA,aAD2B,GACX,OAAI,CAAC1B,OAAL,CAAa4C,cAAb,EADW;AAAA;AAAA,qBAEf3E,mBAAmB,CAACyD,aAAD,EAAgBD,SAAhB,EAA2B,OAAI,CAAC9B,OAAL,CAAaV,IAAxC,CAFJ;;AAAA;AAEjCwC,cAAAA,SAFiC;AAAA,iDAI1BC,aAAa,CAAC1C,IAAd,CAAmByC,SAAnB,CAJ0B;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKpC;;AAxbwB;;AA2b7BoB,MAAM,CAACC,OAAP,GAAiBvE,KAAjB","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst BigNumber = require('bignumber.js')\n\nconst Contract = require('../caver-klay-contract/src')\nconst {\n    validateDeployParameterForKIP17,\n    kip17JsonInterface,\n    kip17ByteCode,\n    determineSendParams,\n    formatParamForUint256,\n} = require('./kctHelper')\nconst { toBuffer, isHexStrict, toHex } = require('../../caver-utils/src')\nconst { isAddress } = require('../../caver-utils/src')\n\nclass KIP17 extends Contract {\n    /**\n     * deploy deploys a KIP-17 token contract to Klaytn network.\n     * `const deployedContract = await caver.klay.KIP17.deploy({\n     *      name: 'TokenName',\n     *      symbol: 'TKN',\n     *  }, '0x{address in hex}')`\n     *\n     * @method deploy\n     * @param {Object} tokenInfo The object that defines the name and symbol of the token to deploy.\n     * @param {String} deployer The address of the account to deploy the KIP-17 token contract.\n     * @return {Object}\n     */\n    static deploy(tokenInfo, deployer) {\n        validateDeployParameterForKIP17(tokenInfo)\n\n        const { name, symbol } = tokenInfo\n        const kip17 = new KIP17()\n\n        return kip17\n            .deploy({\n                data: kip17ByteCode,\n                arguments: [name, symbol],\n            })\n            .send({ from: deployer, gas: 6600000, value: 0 })\n    }\n\n    constructor(tokenAddress, abi = kip17JsonInterface) {\n        if (tokenAddress) {\n            if (_.isString(tokenAddress)) {\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\n            } else {\n                abi = tokenAddress\n                tokenAddress = undefined\n            }\n        }\n        super(abi, tokenAddress)\n    }\n\n    clone(tokenAddress = this.options.address) {\n        return new this.constructor(tokenAddress, this.options.jsonInterface)\n    }\n\n    async supportsInterface(interfaceId) {\n        const isSupported = await this.methods.supportsInterface(interfaceId).call()\n        return isSupported\n    }\n\n    /**\n     * name returns the name of the token.\n     *\n     * @method name\n     * @return {String}\n     */\n    async name() {\n        const name = await this.methods.name().call()\n        return name\n    }\n\n    /**\n     * symbol returns the symbol of the token.\n     *\n     * @method symbol\n     * @return {String}\n     */\n    async symbol() {\n        const symbol = await this.methods.symbol().call()\n        return symbol\n    }\n\n    /**\n     * tokenURI returns the uri of the token.\n     *\n     * @method tokenURI\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {String}\n     */\n    async tokenURI(tokenId) {\n        const tokenURI = await this.methods.tokenURI(formatParamForUint256(tokenId)).call()\n        return tokenURI\n    }\n\n    /**\n     * totalSupply returns the total amount of tokens stored by the contract.\n     *\n     * @method totalSupply\n     * @return {BigNumber}\n     */\n    async totalSupply() {\n        const totalSupply = await this.methods.totalSupply().call()\n        return new BigNumber(totalSupply)\n    }\n\n    /**\n     * tokenOfOwnerByIndex returns the token id at a given index of the tokens list of the requested owner.\n     *\n     * @method tokenOfOwnerByIndex\n     * @param {String} owner The address of the account whose token you want to query.\n     * @param {BigNumber|String|Number} index The index of the token to be searched among the tokens owned by a owner account.\n     * @return {BigNumber}\n     */\n    async tokenOfOwnerByIndex(owner, index) {\n        const token = await this.methods.tokenOfOwnerByIndex(owner, formatParamForUint256(index)).call()\n        return new BigNumber(token)\n    }\n\n    /**\n     * tokenByIndex returns the token id at a given index of all the tokens in this contract.\n     *\n     * @method tokenByIndex\n     * @param {BigNumber|String|Number} index The index of the token to query.\n     * @return {BigNumber}\n     */\n    async tokenByIndex(index) {\n        const token = await this.methods.tokenByIndex(formatParamForUint256(index)).call()\n        return new BigNumber(token)\n    }\n\n    /**\n     * balanceOf returns the balance of the specified address.\n     * The balance of an account in KIP-17 means that the total number of NFT(Non Fungible Token) owned by the account.\n     *\n     * @method balanceOf\n     * @param {String} account The address of the account whose number of tokens you want to see.\n     * @return {BigNumber}\n     */\n    async balanceOf(account) {\n        const balance = await this.methods.balanceOf(account).call()\n        return new BigNumber(balance)\n    }\n\n    /**\n     * ownerOf returns the owner of the specified token id.\n     *\n     * @method ownerOf\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {BigNumber}\n     */\n    async ownerOf(tokenId) {\n        const owner = await this.methods.ownerOf(formatParamForUint256(tokenId)).call()\n        return owner\n    }\n\n    /**\n     * getApproved returns the approved address for a token id, or zero if no address set.\n     *\n     * @method getApproved\n     * @param {BigNumber|String|Number} tokenId The id of the token.\n     * @return {Boolean}\n     */\n    async getApproved(tokenId) {\n        const isApproved = await this.methods.getApproved(formatParamForUint256(tokenId)).call()\n        return isApproved\n    }\n\n    /**\n     * isApprovedForAll returns true if an operator is approved by a given owner.\n     *\n     * @method isApprovedForAll\n     * @param {String} owner The id of the token.\n     * @param {String} operator The id of the token.\n     * @return {Boolean}\n     */\n    async isApprovedForAll(owner, operator) {\n        const isApprovedForAll = await this.methods.isApprovedForAll(owner, operator).call()\n        return isApprovedForAll\n    }\n\n    /**\n     * isMinter returns whether the account is minter or not.\n     *\n     * @method isMinter\n     * @param {String} account The address of the account you want to check minter or not.\n     * @return {Boolean}\n     */\n    async isMinter(account) {\n        const isMinter = await this.methods.isMinter(account).call()\n        return isMinter\n    }\n\n    /**\n     * paused returns whether or not the token contract's transaction is paused.\n     *\n     * @method paused\n     * @return {Boolean}\n     */\n    async paused() {\n        const isPaused = await this.methods.paused().call()\n        return isPaused\n    }\n\n    /**\n     * isPauser returns whether the account is pauser or not.\n     *\n     * @method isPauser\n     * @param {String} account The address of the account you want to check pauser or not.\n     * @return {Boolean}\n     */\n    async isPauser(account) {\n        const isPauser = await this.methods.isPauser(account).call()\n        return isPauser\n    }\n\n    /**\n     * approve sets approval with another address to transfer the given token id.\n     *\n     * @method approve\n     * @param {String} to The address of the account to use on behalf of owner for the tokenId.\n     * @param {BigNumber|String|Number} tokenId The id of token the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async approve(to, tokenId, sendParam = {}) {\n        const executableObj = this.methods.approve(to, formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * setApprovalForAll sets or unsets the approval of a given operator.\n     * An operator is allowed to transfer all tokens of the sender on their behalf.\n     *\n     * @method setApprovalForAll\n     * @param {String} to The address of an account to allow/forbid for transfer of all tokens owned by the owner on behalf of the owner.\n     * @param {Boolean} approved Whether to allow sending tokens on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async setApprovalForAll(to, approved, sendParam = {}) {\n        const executableObj = this.methods.setApprovalForAll(to, approved)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transferFrom transfers the ownership of a given token id to another address.\n     *\n     * @method transferFrom\n     * @param {String} from The address of the owner or approved of the given token.\n     * @param {String} to The address of the account to receive the token.\n     * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async transferFrom(from, to, tokenId, sendParam = {}) {\n        const executableObj = this.methods.transferFrom(from, to, formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransferFrom safely transfers the ownership of a given token id to another address.\n     *\n     * @method safeTransferFrom\n     * @param {String} from The address of the owner or approved of the given token.\n     * @param {String} to The address of the account to receive the token.\n     * @param {BigNumber|String|Number} tokenId The id of token you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async safeTransferFrom(from, to, tokenId, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId), data)\n            : this.methods.safeTransferFrom(from, to, formatParamForUint256(tokenId))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method addMinter\n     * @param {String} account The address of account to add as minter.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async addMinter(account, sendParam = {}) {\n        const executableObj = this.methods.addMinter(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renounceMinter renounces privilege of MinterRole.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @method renounceMinter\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async renounceMinter(sendParam = {}) {\n        const executableObj = this.methods.renounceMinter()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * mint creates token and assigns them to account, increasing the total supply.\n     *\n     * @method mint\n     * @param {String} to The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} tokenId The id of token to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async mint(to, tokenId, sendParam = {}) {\n        const executableObj = this.methods.mint(to, formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * mintWithTokenURI creates token with uri and assigns them to account, increasing the total supply.\n     *\n     * @method mintWithTokenURI\n     * @param {String} to The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} tokenId The id of token to mint.\n     * @param {String} tokenURI The uri of token to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async mintWithTokenURI(to, tokenId, tokenURI, sendParam = {}) {\n        const executableObj = this.methods.mintWithTokenURI(to, formatParamForUint256(tokenId), tokenURI)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burn destroys a specific KIP-17 token.\n     *\n     * @method burn\n     * @param {BigNumber|String|Number} tokenId The id of token to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async burn(tokenId, sendParam = {}) {\n        const executableObj = this.methods.burn(formatParamForUint256(tokenId))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * pause triggers stopped state that stops sending tokens in emergency situation.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @method pause\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async pause(sendParam = {}) {\n        const executableObj = this.methods.pause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * unpause sets amount as the allowance of spender over the caller’s tokens.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @method unpause\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async unpause(sendParam = {}) {\n        const executableObj = this.methods.unpause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @method addPauser\n     * @param {String} account The address of account to add as pauser.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async addPauser(account, sendParam = {}) {\n        const executableObj = this.methods.addPauser(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renouncePauser renounces privilege of PauserRole.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @method renouncePauser\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-17 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-17 abi.\n     */\n    async renouncePauser(sendParam = {}) {\n        const executableObj = this.methods.renouncePauser()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n}\n\nmodule.exports = KIP17\n"]},"metadata":{},"sourceType":"script"}