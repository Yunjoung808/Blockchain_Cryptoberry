{"ast":null,"code":"var _regeneratorRuntime = require(\"C:/Users/MONK/Desktop/Pro/client/node_modules/@babel/runtime/regenerator\");\n\nvar _asyncToGenerator = require(\"C:/Users/MONK/Desktop/Pro/client/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\n/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\nvar _ = require('lodash');\n\nvar BigNumber = require('bignumber.js');\n\nvar Contract = require('../caver-klay-contract');\n\nvar _require = require('./kctHelper'),\n    validateDeployParameterForKIP7 = _require.validateDeployParameterForKIP7,\n    determineSendParams = _require.determineSendParams,\n    kip7JsonInterface = _require.kip7JsonInterface,\n    kip7ByteCode = _require.kip7ByteCode,\n    formatParamForUint256 = _require.formatParamForUint256;\n\nvar _require2 = require('../../caver-utils'),\n    isAddress = _require2.isAddress,\n    toBuffer = _require2.toBuffer,\n    isHexStrict = _require2.isHexStrict,\n    toHex = _require2.toHex;\n\nclass KIP7 extends Contract {\n  /**\n   * deploy deploys a KIP-7 token contract to Klaytn network.\n   * `const deployedContract = await caver.klay.KIP7.deploy({\n   *      name: 'TokenName',\n   *      symbol: 'TKN',\n   *      decimals: 18,\n   *      initialSupply: new BigNumber(1000000000000000000),\n   *  }, '0x{address in hex}')`\n   *\n   * @method deploy\n   * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n   * @param {String} privateKey The address of the account to deploy the KIP-7 token contract.\n   * @return {Object}\n   */\n  static deploy(tokenInfo, deployer) {\n    validateDeployParameterForKIP7(tokenInfo);\n    var name = tokenInfo.name,\n        symbol = tokenInfo.symbol,\n        decimals = tokenInfo.decimals,\n        initialSupply = tokenInfo.initialSupply;\n    var kip7 = new KIP7();\n    return kip7.deploy({\n      data: kip7ByteCode,\n      arguments: [name, symbol, decimals, initialSupply]\n    }).send({\n      from: deployer,\n      gas: 4000000,\n      value: 0\n    });\n  }\n\n  constructor(tokenAddress, abi = kip7JsonInterface) {\n    if (tokenAddress) {\n      if (_.isString(tokenAddress)) {\n        if (!isAddress(tokenAddress)) throw new Error(\"Invalid token address \".concat(tokenAddress));\n      } else {\n        abi = tokenAddress;\n        tokenAddress = undefined;\n      }\n    }\n\n    super(abi, tokenAddress);\n  }\n  /**\n   * clone copies a KIP7 instance with the new address parameter set to the target contract address.\n   *\n   * @method clone\n   * @param {String} tokenAddress The address of the token contract.\n   * @return {Object}\n   */\n\n\n  clone(tokenAddress = this.options.address) {\n    return new this.constructor(tokenAddress, this.options.jsonInterface);\n  }\n  /**\n   * supportsInterface checks whether interface is supported or not.\n   *\n   * @method supportsInterface\n   * @return {Boolean}\n   */\n\n\n  supportsInterface(interfaceId) {\n    var _this = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n      var supported;\n      return _regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this.methods.supportsInterface(interfaceId).call();\n\n            case 2:\n              supported = _context.sent;\n              return _context.abrupt(\"return\", supported);\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, _callee);\n    }))();\n  }\n  /**\n   * name returns the name of the token.\n   *\n   * @method name\n   * @return {String}\n   */\n\n\n  name() {\n    var _this2 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n      var name;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _this2.methods.name().call();\n\n            case 2:\n              name = _context2.sent;\n              return _context2.abrupt(\"return\", name);\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2);\n    }))();\n  }\n  /**\n   * symbol returns the symbol of the token.\n   *\n   * @method symbol\n   * @return {String}\n   */\n\n\n  symbol() {\n    var _this3 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      var symbol;\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _this3.methods.symbol().call();\n\n            case 2:\n              symbol = _context3.sent;\n              return _context3.abrupt(\"return\", symbol);\n\n            case 4:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }))();\n  }\n  /**\n   * decimals returns the decimals of the token.\n   *\n   * @method symbol\n   * @return {Number}\n   */\n\n\n  decimals() {\n    var _this4 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      var decimals;\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return _this4.methods.decimals().call();\n\n            case 2:\n              decimals = _context4.sent;\n              return _context4.abrupt(\"return\", Number(decimals));\n\n            case 4:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4);\n    }))();\n  }\n  /**\n   * totalSupply returns the total supply of the token.\n   *\n   * @method totalSupply\n   * @return {BigNumber}\n   */\n\n\n  totalSupply() {\n    var _this5 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      var totalSupply;\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _this5.methods.totalSupply().call();\n\n            case 2:\n              totalSupply = _context5.sent;\n              return _context5.abrupt(\"return\", new BigNumber(totalSupply));\n\n            case 4:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5);\n    }))();\n  }\n  /**\n   * balanceOf returns the balance of the account.\n   *\n   * @method balanceOf\n   * @param {String} account The address of the account for which you want to see balance.\n   * @return {BigNumber}\n   */\n\n\n  balanceOf(account) {\n    var _this6 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      var balance;\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              _context6.next = 2;\n              return _this6.methods.balanceOf(account).call();\n\n            case 2:\n              balance = _context6.sent;\n              return _context6.abrupt(\"return\", new BigNumber(balance));\n\n            case 4:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }))();\n  }\n  /**\n   * allowance returns the amount the spender is allowed to use on behalf of the owner.\n   *\n   * @method allowance\n   * @param {String} owner The address of the account that set the spender to use the money on behalf of the owner.\n   * @param {String} spender The address of the account that received the approve amount that can be used on behalf of the owner.\n   * @return {BigNumber}\n   */\n\n\n  allowance(owner, spender) {\n    var _this7 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n      var allowance;\n      return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              _context7.next = 2;\n              return _this7.methods.allowance(owner, spender).call();\n\n            case 2:\n              allowance = _context7.sent;\n              return _context7.abrupt(\"return\", new BigNumber(allowance));\n\n            case 4:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, _callee7);\n    }))();\n  }\n  /**\n   * isMinter returns whether the account is minter or not.\n   *\n   * @method isMinter\n   * @param {String} account The address of the account you want to check minter or not.\n   * @return {Boolean}\n   */\n\n\n  isMinter(account) {\n    var _this8 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n      var isMinter;\n      return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n        while (1) {\n          switch (_context8.prev = _context8.next) {\n            case 0:\n              _context8.next = 2;\n              return _this8.methods.isMinter(account).call();\n\n            case 2:\n              isMinter = _context8.sent;\n              return _context8.abrupt(\"return\", isMinter);\n\n            case 4:\n            case \"end\":\n              return _context8.stop();\n          }\n        }\n      }, _callee8);\n    }))();\n  }\n  /**\n   * isPauser returns whether the account is pauser or not.\n   *\n   * @method isPauser\n   * @param {String} account The address of the account you want to check pauser or not.\n   * @return {Boolean}\n   */\n\n\n  isPauser(account) {\n    var _this9 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n      var isPauser;\n      return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n        while (1) {\n          switch (_context9.prev = _context9.next) {\n            case 0:\n              _context9.next = 2;\n              return _this9.methods.isPauser(account).call();\n\n            case 2:\n              isPauser = _context9.sent;\n              return _context9.abrupt(\"return\", isPauser);\n\n            case 4:\n            case \"end\":\n              return _context9.stop();\n          }\n        }\n      }, _callee9);\n    }))();\n  }\n  /**\n   * paused returns whether or not the token contract's transaction is paused.\n   *\n   * @method paused\n   * @return {Boolean}\n   */\n\n\n  paused() {\n    var _this10 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n      var isPaused;\n      return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n        while (1) {\n          switch (_context10.prev = _context10.next) {\n            case 0:\n              _context10.next = 2;\n              return _this10.methods.paused().call();\n\n            case 2:\n              isPaused = _context10.sent;\n              return _context10.abrupt(\"return\", isPaused);\n\n            case 4:\n            case \"end\":\n              return _context10.stop();\n          }\n        }\n      }, _callee10);\n    }))();\n  }\n  /**\n   * approve sets amount as the allowance of spender over the caller’s tokens.\n   *\n   * @method approve\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  approve(spender, amount, sendParam = {}) {\n    var _this11 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n        while (1) {\n          switch (_context11.prev = _context11.next) {\n            case 0:\n              executableObj = _this11.methods.approve(spender, formatParamForUint256(amount));\n              _context11.next = 3;\n              return determineSendParams(executableObj, sendParam, _this11.options.from);\n\n            case 3:\n              sendParam = _context11.sent;\n              return _context11.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context11.stop();\n          }\n        }\n      }, _callee11);\n    }))();\n  }\n  /**\n   * transfer moves amount tokens from the caller’s account to recipient.\n   *\n   * @method transfer\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  transfer(recipient, amount, sendParam = {}) {\n    var _this12 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n        while (1) {\n          switch (_context12.prev = _context12.next) {\n            case 0:\n              executableObj = _this12.methods.transfer(recipient, formatParamForUint256(amount));\n              _context12.next = 3;\n              return determineSendParams(executableObj, sendParam, _this12.options.from);\n\n            case 3:\n              sendParam = _context12.sent;\n              return _context12.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context12.stop();\n          }\n        }\n      }, _callee12);\n    }))();\n  }\n  /**\n   * transferFrom moves amount tokens from sender to recipient using the allowance mechanism.\n   * amount is then deducted from the caller’s allowance.\n   *\n   * @method transferFrom\n   * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  transferFrom(sender, recipient, amount, sendParam = {}) {\n    var _this13 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n        while (1) {\n          switch (_context13.prev = _context13.next) {\n            case 0:\n              executableObj = _this13.methods.transferFrom(sender, recipient, formatParamForUint256(amount));\n              _context13.next = 3;\n              return determineSendParams(executableObj, sendParam, _this13.options.from);\n\n            case 3:\n              sendParam = _context13.sent;\n              return _context13.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context13.stop();\n          }\n        }\n      }, _callee13);\n    }))();\n  }\n  /**\n   * safeTransfer safely transfers tokens to another address.\n   *\n   * @method safeTransfer\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  safeTransfer(recipient, amount, data, sendParam = {}) {\n    var _this14 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n        while (1) {\n          switch (_context14.prev = _context14.next) {\n            case 0:\n              if (!(data && _.isObject(data))) {\n                _context14.next = 6;\n                break;\n              }\n\n              if (!(data.gas !== undefined || data.from !== undefined)) {\n                _context14.next = 6;\n                break;\n              }\n\n              if (!(Object.keys(sendParam).length > 0)) {\n                _context14.next = 4;\n                break;\n              }\n\n              throw new Error(\"Invalid parameters\");\n\n            case 4:\n              sendParam = data;\n              data = undefined;\n\n            case 6:\n              if (data && !_.isBuffer(data)) {\n                if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                data = toBuffer(data);\n              }\n\n              executableObj = data ? _this14.methods.safeTransfer(recipient, formatParamForUint256(amount), data) : _this14.methods.safeTransfer(recipient, formatParamForUint256(amount));\n              _context14.next = 10;\n              return determineSendParams(executableObj, sendParam, _this14.options.from);\n\n            case 10:\n              sendParam = _context14.sent;\n              return _context14.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 12:\n            case \"end\":\n              return _context14.stop();\n          }\n        }\n      }, _callee14);\n    }))();\n  }\n  /**\n   * safeTransferFrom safely transfers tokens to another address.\n   *\n   * @method safeTransferFrom\n   * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n   * @param {String} recipient The address of the account to receive the token.\n   * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n   * @param {Buffer|String|Number} data The optional data to send along with the call.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  safeTransferFrom(sender, recipient, amount, data, sendParam = {}) {\n    var _this15 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n        while (1) {\n          switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!(data && _.isObject(data))) {\n                _context15.next = 6;\n                break;\n              }\n\n              if (!(data.gas !== undefined || data.from !== undefined)) {\n                _context15.next = 6;\n                break;\n              }\n\n              if (!(Object.keys(sendParam).length > 0)) {\n                _context15.next = 4;\n                break;\n              }\n\n              throw new Error(\"Invalid parameters\");\n\n            case 4:\n              sendParam = data;\n              data = undefined;\n\n            case 6:\n              if (data && !_.isBuffer(data)) {\n                if (_.isString(data) && !isHexStrict(data)) data = toHex(data);\n                data = toBuffer(data);\n              }\n\n              executableObj = data ? _this15.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount), data) : _this15.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount));\n              _context15.next = 10;\n              return determineSendParams(executableObj, sendParam, _this15.options.from);\n\n            case 10:\n              sendParam = _context15.sent;\n              return _context15.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 12:\n            case \"end\":\n              return _context15.stop();\n          }\n        }\n      }, _callee15);\n    }))();\n  }\n  /**\n   * mint creates amount tokens and assigns them to account, increasing the total supply.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method mint\n   * @param {String} account The address of the account to which the minted token will be allocated.\n   * @param {BigNumber|String|Number} amount The amount of tokens to mint.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  mint(account, amount, sendParam = {}) {\n    var _this16 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n        while (1) {\n          switch (_context16.prev = _context16.next) {\n            case 0:\n              executableObj = _this16.methods.mint(account, formatParamForUint256(amount));\n              _context16.next = 3;\n              return determineSendParams(executableObj, sendParam, _this16.options.from);\n\n            case 3:\n              sendParam = _context16.sent;\n              return _context16.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context16.stop();\n          }\n        }\n      }, _callee16);\n    }))();\n  }\n  /**\n   * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n   * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n   *\n   * @method addMinter\n   * @param {String} account The address of account to add as minter.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  addMinter(account, sendParam = {}) {\n    var _this17 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n        while (1) {\n          switch (_context17.prev = _context17.next) {\n            case 0:\n              executableObj = _this17.methods.addMinter(account);\n              _context17.next = 3;\n              return determineSendParams(executableObj, sendParam, _this17.options.from);\n\n            case 3:\n              sendParam = _context17.sent;\n              return _context17.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context17.stop();\n          }\n        }\n      }, _callee17);\n    }))();\n  }\n  /**\n   * renounceMinter renounces privilege of MinterRole.\n   * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n   *\n   * @method renounceMinter\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  renounceMinter(sendParam = {}) {\n    var _this18 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n        while (1) {\n          switch (_context18.prev = _context18.next) {\n            case 0:\n              executableObj = _this18.methods.renounceMinter();\n              _context18.next = 3;\n              return determineSendParams(executableObj, sendParam, _this18.options.from);\n\n            case 3:\n              sendParam = _context18.sent;\n              return _context18.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context18.stop();\n          }\n        }\n      }, _callee18);\n    }))();\n  }\n  /**\n   * burn destroys amount tokens from the caller.\n   *\n   * @method burn\n   * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  burn(amount, sendParam = {}) {\n    var _this19 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n        while (1) {\n          switch (_context19.prev = _context19.next) {\n            case 0:\n              executableObj = _this19.methods.burn(formatParamForUint256(amount));\n              _context19.next = 3;\n              return determineSendParams(executableObj, sendParam, _this19.options.from);\n\n            case 3:\n              sendParam = _context19.sent;\n              return _context19.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context19.stop();\n          }\n        }\n      }, _callee19);\n    }))();\n  }\n  /**\n   * burnFrom destroys amount tokens from account is then deducted from the caller’s allowance.\n   *\n   * @method burnFrom\n   * @param {String} account The address of the account that owns the token to be burned with allowance mechanism.\n   * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  burnFrom(account, amount, sendParam = {}) {\n    var _this20 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n        while (1) {\n          switch (_context20.prev = _context20.next) {\n            case 0:\n              executableObj = _this20.methods.burnFrom(account, formatParamForUint256(amount));\n              _context20.next = 3;\n              return determineSendParams(executableObj, sendParam, _this20.options.from);\n\n            case 3:\n              sendParam = _context20.sent;\n              return _context20.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context20.stop();\n          }\n        }\n      }, _callee20);\n    }))();\n  }\n  /**\n   * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n   * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n   *\n   * @method addPauser\n   * @param {String} account The address of account to add as pauser.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  addPauser(account, sendParam = {}) {\n    var _this21 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n        while (1) {\n          switch (_context21.prev = _context21.next) {\n            case 0:\n              executableObj = _this21.methods.addPauser(account);\n              _context21.next = 3;\n              return determineSendParams(executableObj, sendParam, _this21.options.from);\n\n            case 3:\n              sendParam = _context21.sent;\n              return _context21.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context21.stop();\n          }\n        }\n      }, _callee21);\n    }))();\n  }\n  /**\n   * pause triggers stopped state that stops sending tokens in emergency situation.\n   * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n   *\n   * @method pause\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  pause(sendParam = {}) {\n    var _this22 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n        while (1) {\n          switch (_context22.prev = _context22.next) {\n            case 0:\n              executableObj = _this22.methods.pause();\n              _context22.next = 3;\n              return determineSendParams(executableObj, sendParam, _this22.options.from);\n\n            case 3:\n              sendParam = _context22.sent;\n              return _context22.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context22.stop();\n          }\n        }\n      }, _callee22);\n    }))();\n  }\n  /**\n   * unpause sets amount as the allowance of spender over the caller’s tokens.\n   * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n   *\n   * @method unpause\n   * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n   * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  unpause(sendParam = {}) {\n    var _this23 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n        while (1) {\n          switch (_context23.prev = _context23.next) {\n            case 0:\n              executableObj = _this23.methods.unpause();\n              _context23.next = 3;\n              return determineSendParams(executableObj, sendParam, _this23.options.from);\n\n            case 3:\n              sendParam = _context23.sent;\n              return _context23.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context23.stop();\n          }\n        }\n      }, _callee23);\n    }))();\n  }\n  /**\n   * renouncePauser renounces privilege of PauserRole.\n   * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n   *\n   * @method renouncePauser\n   * @param {Object} sendParam An object with defined parameters for sending a transaction.\n   * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n   *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n   */\n\n\n  renouncePauser(sendParam = {}) {\n    var _this24 = this;\n\n    return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n      var executableObj;\n      return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n        while (1) {\n          switch (_context24.prev = _context24.next) {\n            case 0:\n              executableObj = _this24.methods.renouncePauser();\n              _context24.next = 3;\n              return determineSendParams(executableObj, sendParam, _this24.options.from);\n\n            case 3:\n              sendParam = _context24.sent;\n              return _context24.abrupt(\"return\", executableObj.send(sendParam));\n\n            case 5:\n            case \"end\":\n              return _context24.stop();\n          }\n        }\n      }, _callee24);\n    }))();\n  }\n\n}\n\nmodule.exports = KIP7;","map":{"version":3,"sources":["C:/Users/MONK/Desktop/Pro/client/node_modules/caver-js/packages/caver-klay/caver-klay-kct/kip7.js"],"names":["_","require","BigNumber","Contract","validateDeployParameterForKIP7","determineSendParams","kip7JsonInterface","kip7ByteCode","formatParamForUint256","isAddress","toBuffer","isHexStrict","toHex","KIP7","deploy","tokenInfo","deployer","name","symbol","decimals","initialSupply","kip7","data","arguments","send","from","gas","value","constructor","tokenAddress","abi","isString","Error","undefined","clone","options","address","jsonInterface","supportsInterface","interfaceId","methods","call","supported","Number","totalSupply","balanceOf","account","balance","allowance","owner","spender","isMinter","isPauser","paused","isPaused","approve","amount","sendParam","executableObj","transfer","recipient","transferFrom","sender","safeTransfer","isObject","Object","keys","length","isBuffer","safeTransferFrom","mint","addMinter","renounceMinter","burn","burnFrom","addPauser","pause","unpause","renouncePauser","module","exports"],"mappings":"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","sourcesContent":["/*\n    Copyright 2020 The caver-js Authors\n    This file is part of the caver-js library.\n\n    The caver-js library is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    The caver-js library is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with the caver-js. If not, see <http://www.gnu.org/licenses/>.\n*/\n\nconst _ = require('lodash')\nconst BigNumber = require('bignumber.js')\n\nconst Contract = require('../caver-klay-contract')\nconst {\n    validateDeployParameterForKIP7,\n    determineSendParams,\n    kip7JsonInterface,\n    kip7ByteCode,\n    formatParamForUint256,\n} = require('./kctHelper')\nconst { isAddress, toBuffer, isHexStrict, toHex } = require('../../caver-utils')\n\nclass KIP7 extends Contract {\n    /**\n     * deploy deploys a KIP-7 token contract to Klaytn network.\n     * `const deployedContract = await caver.klay.KIP7.deploy({\n     *      name: 'TokenName',\n     *      symbol: 'TKN',\n     *      decimals: 18,\n     *      initialSupply: new BigNumber(1000000000000000000),\n     *  }, '0x{address in hex}')`\n     *\n     * @method deploy\n     * @param {Object} tokenInfo The object that defines the name, symbol, decimals, and initialSupply of the token to deploy.\n     * @param {String} privateKey The address of the account to deploy the KIP-7 token contract.\n     * @return {Object}\n     */\n    static deploy(tokenInfo, deployer) {\n        validateDeployParameterForKIP7(tokenInfo)\n\n        const { name, symbol, decimals, initialSupply } = tokenInfo\n        const kip7 = new KIP7()\n\n        return kip7\n            .deploy({\n                data: kip7ByteCode,\n                arguments: [name, symbol, decimals, initialSupply],\n            })\n            .send({ from: deployer, gas: 4000000, value: 0 })\n    }\n\n    constructor(tokenAddress, abi = kip7JsonInterface) {\n        if (tokenAddress) {\n            if (_.isString(tokenAddress)) {\n                if (!isAddress(tokenAddress)) throw new Error(`Invalid token address ${tokenAddress}`)\n            } else {\n                abi = tokenAddress\n                tokenAddress = undefined\n            }\n        }\n\n        super(abi, tokenAddress)\n    }\n\n    /**\n     * clone copies a KIP7 instance with the new address parameter set to the target contract address.\n     *\n     * @method clone\n     * @param {String} tokenAddress The address of the token contract.\n     * @return {Object}\n     */\n    clone(tokenAddress = this.options.address) {\n        return new this.constructor(tokenAddress, this.options.jsonInterface)\n    }\n\n    /**\n     * supportsInterface checks whether interface is supported or not.\n     *\n     * @method supportsInterface\n     * @return {Boolean}\n     */\n    async supportsInterface(interfaceId) {\n        const supported = await this.methods.supportsInterface(interfaceId).call()\n        return supported\n    }\n\n    /**\n     * name returns the name of the token.\n     *\n     * @method name\n     * @return {String}\n     */\n    async name() {\n        const name = await this.methods.name().call()\n        return name\n    }\n\n    /**\n     * symbol returns the symbol of the token.\n     *\n     * @method symbol\n     * @return {String}\n     */\n    async symbol() {\n        const symbol = await this.methods.symbol().call()\n        return symbol\n    }\n\n    /**\n     * decimals returns the decimals of the token.\n     *\n     * @method symbol\n     * @return {Number}\n     */\n    async decimals() {\n        const decimals = await this.methods.decimals().call()\n        return Number(decimals)\n    }\n\n    /**\n     * totalSupply returns the total supply of the token.\n     *\n     * @method totalSupply\n     * @return {BigNumber}\n     */\n    async totalSupply() {\n        const totalSupply = await this.methods.totalSupply().call()\n        return new BigNumber(totalSupply)\n    }\n\n    /**\n     * balanceOf returns the balance of the account.\n     *\n     * @method balanceOf\n     * @param {String} account The address of the account for which you want to see balance.\n     * @return {BigNumber}\n     */\n    async balanceOf(account) {\n        const balance = await this.methods.balanceOf(account).call()\n        return new BigNumber(balance)\n    }\n\n    /**\n     * allowance returns the amount the spender is allowed to use on behalf of the owner.\n     *\n     * @method allowance\n     * @param {String} owner The address of the account that set the spender to use the money on behalf of the owner.\n     * @param {String} spender The address of the account that received the approve amount that can be used on behalf of the owner.\n     * @return {BigNumber}\n     */\n    async allowance(owner, spender) {\n        const allowance = await this.methods.allowance(owner, spender).call()\n        return new BigNumber(allowance)\n    }\n\n    /**\n     * isMinter returns whether the account is minter or not.\n     *\n     * @method isMinter\n     * @param {String} account The address of the account you want to check minter or not.\n     * @return {Boolean}\n     */\n    async isMinter(account) {\n        const isMinter = await this.methods.isMinter(account).call()\n        return isMinter\n    }\n\n    /**\n     * isPauser returns whether the account is pauser or not.\n     *\n     * @method isPauser\n     * @param {String} account The address of the account you want to check pauser or not.\n     * @return {Boolean}\n     */\n    async isPauser(account) {\n        const isPauser = await this.methods.isPauser(account).call()\n        return isPauser\n    }\n\n    /**\n     * paused returns whether or not the token contract's transaction is paused.\n     *\n     * @method paused\n     * @return {Boolean}\n     */\n    async paused() {\n        const isPaused = await this.methods.paused().call()\n        return isPaused\n    }\n\n    /**\n     * approve sets amount as the allowance of spender over the caller’s tokens.\n     *\n     * @method approve\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async approve(spender, amount, sendParam = {}) {\n        const executableObj = this.methods.approve(spender, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transfer moves amount tokens from the caller’s account to recipient.\n     *\n     * @method transfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transfer(recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transfer(recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * transferFrom moves amount tokens from sender to recipient using the allowance mechanism.\n     * amount is then deducted from the caller’s allowance.\n     *\n     * @method transferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async transferFrom(sender, recipient, amount, sendParam = {}) {\n        const executableObj = this.methods.transferFrom(sender, recipient, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransfer safely transfers tokens to another address.\n     *\n     * @method safeTransfer\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransfer(recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransfer(recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransfer(recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * safeTransferFrom safely transfers tokens to another address.\n     *\n     * @method safeTransferFrom\n     * @param {String} sender The address of the account that owns the token to be sent with allowance mechanism.\n     * @param {String} recipient The address of the account to receive the token.\n     * @param {BigNumber|String|Number} amount The amount of tokens you want to transfer.\n     * @param {Buffer|String|Number} data The optional data to send along with the call.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async safeTransferFrom(sender, recipient, amount, data, sendParam = {}) {\n        if (data && _.isObject(data)) {\n            if (data.gas !== undefined || data.from !== undefined) {\n                if (Object.keys(sendParam).length > 0) throw new Error(`Invalid parameters`)\n                sendParam = data\n                data = undefined\n            }\n        }\n\n        if (data && !_.isBuffer(data)) {\n            if (_.isString(data) && !isHexStrict(data)) data = toHex(data)\n            data = toBuffer(data)\n        }\n\n        const executableObj = data\n            ? this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount), data)\n            : this.methods.safeTransferFrom(sender, recipient, formatParamForUint256(amount))\n\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * mint creates amount tokens and assigns them to account, increasing the total supply.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method mint\n     * @param {String} account The address of the account to which the minted token will be allocated.\n     * @param {BigNumber|String|Number} amount The amount of tokens to mint.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async mint(account, amount, sendParam = {}) {\n        const executableObj = this.methods.mint(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addMinter adds an account as a minter that has the permission of MinterRole and can mint.\n     * The account sending transaction to execute the addMinter must be a Minter with a MinterRole.\n     *\n     * @method addMinter\n     * @param {String} account The address of account to add as minter.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addMinter(account, sendParam = {}) {\n        const executableObj = this.methods.addMinter(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renounceMinter renounces privilege of MinterRole.\n     * The account sending transaction to execute the renounceMinter must be a Minter with a MinterRole.\n     *\n     * @method renounceMinter\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renounceMinter(sendParam = {}) {\n        const executableObj = this.methods.renounceMinter()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burn destroys amount tokens from the caller.\n     *\n     * @method burn\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burn(amount, sendParam = {}) {\n        const executableObj = this.methods.burn(formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * burnFrom destroys amount tokens from account is then deducted from the caller’s allowance.\n     *\n     * @method burnFrom\n     * @param {String} account The address of the account that owns the token to be burned with allowance mechanism.\n     * @param {BigNumber|String|Number} amount The amount of tokens to destroy.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async burnFrom(account, amount, sendParam = {}) {\n        const executableObj = this.methods.burnFrom(account, formatParamForUint256(amount))\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * addPauser adds an account as a pauser that has the permission of PauserRole and can pause.\n     * The account sending transaction to execute the addPauser must be a Pauser with a PauserRole.\n     *\n     * @method addPauser\n     * @param {String} account The address of account to add as pauser.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async addPauser(account, sendParam = {}) {\n        const executableObj = this.methods.addPauser(account)\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * pause triggers stopped state that stops sending tokens in emergency situation.\n     * The account sending transaction to execute the pause must be a Pauser with a PauserRole.\n     *\n     * @method pause\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async pause(sendParam = {}) {\n        const executableObj = this.methods.pause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * unpause sets amount as the allowance of spender over the caller’s tokens.\n     * The account sending transaction to execute the unpause must be a Pauser with a PauserRole.\n     *\n     * @method unpause\n     * @param {String} spender The address of the account to use on behalf of owner for the amount to be set in allowance.\n     * @param {BigNumber|String|Number} amount The amount of tokens the spender allows to use on behalf of the owner.\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async unpause(sendParam = {}) {\n        const executableObj = this.methods.unpause()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n\n    /**\n     * renouncePauser renounces privilege of PauserRole.\n     * The account sending transaction to execute the renouncePauser must be a Pauser with a PauserRole.\n     *\n     * @method renouncePauser\n     * @param {Object} sendParam An object with defined parameters for sending a transaction.\n     * @return {Object} A receipt containing the execution result of the transaction for executing the KIP-7 token contract.\n     *                  In this receipt, instead of the logs property, there is an events property parsed by KIP-7 abi.\n     */\n    async renouncePauser(sendParam = {}) {\n        const executableObj = this.methods.renouncePauser()\n        sendParam = await determineSendParams(executableObj, sendParam, this.options.from)\n\n        return executableObj.send(sendParam)\n    }\n}\n\nmodule.exports = KIP7\n"]},"metadata":{},"sourceType":"script"}