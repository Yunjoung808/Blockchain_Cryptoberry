{"ast":null,"code":"var _slicedToArray = require(\"C:/Users/MONK/Desktop/Cryptoberry(db)/client/node_modules/@babel/runtime/helpers/slicedToArray\");\n\n/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-method/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\nvar _ = require('lodash');\n\nvar errors = require('../../caver-core-helpers').errors;\n\nvar formatters = require('../../caver-core-helpers').formatters;\n\nvar utils = require('../../caver-utils');\n\nvar Subscriptions = require('../../caver-core-subscriptions').subscriptions;\n\nvar validateParams = require('../../caver-core-helpers').validateFunction.validateParams;\n\nvar TIMEOUTBLOCK = 50;\nvar AVERAGE_BLOCK_TIME = 1; // 1s\n\nvar POLLINGTIMEOUT = AVERAGE_BLOCK_TIME * TIMEOUTBLOCK; // ~average block time (seconds) * TIMEOUTBLOCK\n\nfunction Method(options) {\n  // call, name should be existed to create a method.\n  if (!options.call || !options.name) throw errors.needNameCallPropertyToCreateMethod;\n  this.name = options.name;\n  this.call = options.call;\n  this.hexCall = options.hexCall;\n  this.params = options.params || 0;\n  this.inputFormatter = options.inputFormatter || [];\n  this.outputFormatter = options.outputFormatter;\n  this.transformPayload = options.transformPayload;\n  this.extraFormatters = options.extraFormatters;\n  this.requestManager = options.requestManager; // reference to klay.accounts\n\n  this.accounts = options.accounts;\n  this.defaultBlock = options.defaultBlock || 'latest';\n  this.defaultAccount = options.defaultAccount || null;\n}\n\nMethod.prototype.setRequestManager = setRequestManager;\nMethod.prototype.createFunction = createFunction;\nMethod.prototype.attachToObject = attachToObject;\nMethod.prototype.getCall = getCall;\nMethod.prototype.extractCallback = extractCallback;\nMethod.prototype.validateArgs = validateArgs;\nMethod.prototype.formatInput = formatInput;\nMethod.prototype.formatOutput = formatOutput;\nMethod.prototype.toPayload = toPayload;\nMethod.prototype.buildCall = buildCall;\nMethod.prototype._confirmTransaction = _confirmTransaction;\nMethod.prototype.request = request;\n/**\n * Set requestManager for rpc calling.\n * If it has accounts parameter also, set it.\n * @method setRequestManager\n * @param  {Object} requestManager\n * @param  {Object} accounts\n */\n\nfunction setRequestManager(requestManager, accounts) {\n  this.requestManager = requestManager; // reference to klay.accounts\n\n  if (accounts) this.accounts = accounts;\n}\n/**\n * createFunction through 'this' context (= instance by created through new Method(...))\n * @method createFunction\n * @param  {Object} requestManager\n * @param  {Object} accounts\n * @return {Function} it will be used for sending RPC call.\n */\n\n\nfunction createFunction(requestManager, accounts) {\n  // set requestManager for method individulally.\n  this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts); // this.buildCall() returns function `send = function() { ... }`\n\n  var func = this.buildCall(); // call is directly used for rpc calling,\n  // ex) 'klay_sendTransaction'\n\n  func.call = this.call;\n  return func;\n}\n/**\n * attach buildCalled method to 'obj' object,\n * by adding a property name through this.name\n * @method attachToObject\n * @param  {Object} obj\n */\n\n\nfunction attachToObject(obj) {\n  var func = this.buildCall();\n  func.call = this.call;\n\n  var _this$name$split = this.name.split('.'),\n      _this$name$split2 = _slicedToArray(_this$name$split, 2),\n      callName = _this$name$split2[0],\n      optionalName = _this$name$split2[1];\n\n  if (optionalName) {\n    obj[callName] = obj[callName] || {};\n    obj[callName][optionalName] = func;\n  } else {\n    obj[callName] = func;\n  }\n}\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\n\n\nfunction getCall(args) {\n  // If hexCall is defined, args[0] type is truly hexParameter, return this.hexCall\n  // If not, return this.call\n  // 'this.call', 'this.hexCall' are defined in rpc.json\n  return this.hexCall && utils.isHexParameter(args[0]) ? this.hexCall : this.call;\n}\n/**\n * Should be used to extract callback from array of arguments.\n * (caution) It modifies input param.\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\n\n\nfunction extractCallback(args) {\n  if (_.isFunction(args[args.length - 1])) {\n    return args.pop(); // 'pop' method modifies the original args array!\n  }\n}\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\n\n\nfunction validateArgs(args) {\n  if (args.length !== this.params) {\n    throw errors.InvalidNumberOfParams(args.length, this.params, this.name);\n  }\n}\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\n\n\nfunction formatInput(args) {\n  var _this = this; // If inputFormatter is not defined, or empty just return original args.\n\n\n  if (!this.inputFormatter || _.isEmpty(this.inputFormatter)) {\n    return args;\n  } // If inputFormatter is defined, map original args by calling formatter.\n\n\n  return this.inputFormatter.map((formatter, index) => {\n    // bind this for defaultBlock, and defaultAccount\n    return formatter && formatter.call(_this, args[index]) || args[index];\n  });\n}\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\n\n\nfunction formatOutput(result) {\n  var _this = this; // If outputFormatter is defined, calling outputFormatter,\n  // If not, just return original res.\n\n\n  var _formatOutput = res => typeof _this.outputFormatter === 'function' ? _this.outputFormatter(res) : res; // If result is array, map it through calling _formatOuput\n  // If result is single, just calling _formatOutput.\n\n\n  return _.isArray(result) ? result.map(_formatOutput) : _formatOutput(result);\n}\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\n\n\nfunction toPayload(args) {\n  var call = this.getCall(args);\n  var callback = this.extractCallback(args);\n  var inputParams = this.formatInput(args);\n  this.validateArgs(inputParams);\n  var payload = {\n    method: call,\n    params: inputParams,\n    callback\n  }; // If payload transform option is existing, apply it.\n  // If not, just return payload.\n\n  return this.transformPayload && this.transformPayload(payload) || payload;\n}\n\nvar buildSendTxCallbackFunc = (defer, method, payload, isSendTx) => (err, result) => {\n  try {\n    result = method.formatOutput(result);\n  } catch (e) {\n    if (!err) err = e;\n  }\n\n  err = result instanceof Error && result || err; // If err exists, fireError\n\n  if (err) {\n    return utils._fireError(err.error || err, // sometimes, err.error property exists, in case, fire it instead 'err'\n    defer.eventEmitter, defer.reject, payload.callback);\n  } // fire callback\n\n\n  if (payload.callback) payload.callback(null, result); // return PROMISE\n\n  if (!isSendTx) {\n    defer.resolve(result);\n  } else {\n    defer.eventEmitter.emit('transactionHash', result);\n\n    method._confirmTransaction(defer, result, payload);\n  }\n};\n\nvar buildSendSignedTxFunc = (method, payload, sendTxCallback) => sign => {\n  var signedPayload = _.extend({}, payload, {\n    method: 'klay_sendRawTransaction',\n    params: [sign.rawTransaction]\n  });\n\n  method.requestManager.send(signedPayload, sendTxCallback);\n};\n\nvar buildSendRequestFunc = (defer, sendSignedTx, sendTxCallback) => (payload, method) => {\n  // Logic for handling multiple cases of parameters in sendSignedTransaction.\n  // 1. Object containing rawTransaction\n  //    : call 'klay_sendRawTransaction' with RLP encoded transaction(rawTransaction) in object\n  // 2. A transaction object containing signatures or feePayerSignatures\n  //    : call 'getRawTransactionWithSignatures', then call 'klay_sendRawTransaction' with result of getRawTransactionWithSignatures\n  if (method && method.accounts && payload.method === 'klay_sendRawTransaction') {\n    var transaction = payload.params[0];\n\n    if (typeof transaction !== 'string' && _.isObject(transaction)) {\n      if (transaction.rawTransaction) {\n        return sendSignedTx(transaction);\n      }\n\n      return method.accounts.getRawTransactionWithSignatures(transaction).then(sendSignedTx).catch(e => {\n        sendTxCallback(e);\n      });\n    }\n  }\n\n  if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n    switch (payload.method) {\n      case 'klay_sendTransaction':\n        {\n          var tx = payload.params[0];\n          var error;\n\n          if (!_.isObject(tx)) {\n            sendTxCallback(new Error('The transaction must be defined as an object.'));\n            return;\n          }\n\n          var addressToUse = tx.from;\n\n          if (tx.senderRawTransaction && tx.feePayer) {\n            addressToUse = tx.feePayer;\n\n            if (tx.from) {\n              console.log('\"from\" is ignored for a fee-delegated transaction.');\n              delete tx.from;\n            }\n          }\n\n          var wallet;\n\n          try {\n            wallet = method.accounts.wallet.getAccount(addressToUse);\n          } catch (e) {\n            sendTxCallback(e);\n            return;\n          }\n\n          if (wallet && wallet.privateKey) {\n            var privateKey = method.accounts._getRoleKey(tx, wallet); // If wallet was found, sign tx, and send using sendRawTransaction\n\n\n            return method.accounts.signTransaction(tx, privateKey).then(sendSignedTx).catch(e => {\n              sendTxCallback(e);\n            });\n          }\n\n          if (tx.signatures) {\n            // If signatures is defined inside of the transaction object,\n            // get rawTransaction string from signed transaction object and send to network\n            return method.accounts.getRawTransactionWithSignatures(tx).then(sendSignedTx).catch(e => {\n              sendTxCallback(e);\n            });\n          } // If wallet was not found in caver-js wallet, then it has to use wallet in Node.\n          // Signing to transaction using wallet in Node supports only LEGACY transaction, so if transaction is not LEGACY, return error.\n\n\n          if (tx.feePayer !== undefined || tx.type !== undefined && tx.type !== 'LEGACY') {\n            error = new Error(\"No private key found in the caver-js wallet. Trying to use the Klaytn node's wallet, but it only supports legacy transactions. Please add private key of \".concat(addressToUse, \" to the caver-js wallet.\"));\n            sendTxCallback(error);\n            return;\n          }\n\n          error = validateParams(tx);\n\n          if (error) {\n            sendTxCallback(error);\n            return;\n          }\n\n          break;\n        }\n\n      case 'klay_sign':\n        {\n          var data = payload.params[1];\n\n          var _wallet = method.accounts.wallet.getAccount(payload.params[0]);\n\n          if (_wallet && _wallet.privateKey) {\n            // If wallet was found, sign tx, and send using sendRawTransaction\n            var sign = method.accounts.sign(data, _wallet.privateKey);\n            if (payload.callback) payload.callback(null, sign.signature);\n            defer.resolve(sign.signature);\n            return;\n          }\n\n          break;\n        }\n    }\n  }\n\n  return method.requestManager.send(payload, sendTxCallback);\n};\n\nvar buildSendFunc = (method, isSendTx) => (...args) => {\n  var defer = utils.promiEvent(!isSendTx);\n  var payload = method.toPayload(args);\n  var sendTxCallback = buildSendTxCallbackFunc(defer, method, payload, isSendTx);\n  var sendSignedTx = buildSendSignedTxFunc(method, payload, sendTxCallback);\n  var sendRequest = buildSendRequestFunc(defer, sendSignedTx, sendTxCallback);\n  var isGasPriceInputMissing = isSendTx && _.isObject(payload.params[0]) && payload.params[0].gasPrice === undefined; // If gasPrice input is missing, call getGasPrice rpc\n\n  if (!isGasPriceInputMissing) {\n    sendRequest(payload, method);\n    return defer.eventEmitter;\n  }\n\n  var getGasPrice = new Method({\n    name: 'getGasPrice',\n    call: 'klay_gasPrice',\n    params: 0\n  }).createFunction(method.requestManager);\n  getGasPrice((err, gasPrice) => {\n    payload.params[0].gasPrice = gasPrice || payload.params[0].gasPrice;\n    sendRequest(payload, method);\n  });\n  /**\n   * attaching `.on('receipt')` is possible by returning defer.eventEmitter\n   */\n\n  return defer.eventEmitter;\n};\n\nfunction buildCall() {\n  var method = this;\n  var isSendTx = method.call === 'klay_sendTransaction' || method.call === 'klay_sendRawTransaction' || method.call === 'personal_sendTransaction' || method.call === 'personal_sendValueTransfer' || method.call === 'personal_sendAccountUpdate';\n  var send = buildSendFunc(method, isSendTx); // necessary to attach things to the method\n\n  send.method = method; // necessary for batch requests\n\n  send.request = this.request.bind(this);\n  return send;\n}\n\nfunction _confirmTransaction(defer, result, payload) {\n  var payloadTxObject = payload.params && _.isObject(payload.params[0]) && payload.params[0] || {}; // mutableConfirmationPack will be used in\n  // 1) checkConfirmation,\n  // 2) startWatching functions\n  // It is * mutable *, both functions can affect properties mutably.\n\n  var mutableConfirmationPack = {\n    method: this,\n    promiseResolved: false,\n    canUnsubscribe: true,\n    timeoutCount: 0,\n    intervalId: null,\n    gasProvided: payloadTxObject.gas || null,\n    isContractDeployment: utils.isContractDeployment(payloadTxObject),\n    defer,\n    result,\n    _klaytnCall: {}\n  };\n  addCustomSendMethod(mutableConfirmationPack);\n  kickoffConfirmation(mutableConfirmationPack);\n}\n\nvar addCustomSendMethod = mutableConfirmationPack => {\n  var customSendMethods = [new Method({\n    name: 'getTransactionReceipt',\n    call: 'klay_getTransactionReceipt',\n    params: 1,\n    outputFormatter: formatters.outputTransactionReceiptFormatter\n  }), new Method({\n    name: 'getCode',\n    call: 'klay_getCode',\n    params: 2,\n    inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter]\n  }), new Subscriptions({\n    name: 'subscribe',\n    type: 'klay',\n    subscriptions: {\n      newBlockHeaders: {\n        subscriptionName: 'newHeads',\n        // replace subscription with this name\n        params: 0,\n        outputFormatter: formatters.outputBlockFormatter\n      }\n    }\n  })]; // add custom send Methods\n\n  _.each(customSendMethods, mthd => {\n    // attach methods to _klaytnCall\n    mthd.attachToObject(mutableConfirmationPack._klaytnCall); // assign rather than call setRequestManager()\n\n    mthd.requestManager = mutableConfirmationPack.method.requestManager;\n  });\n};\n\nvar kickoffConfirmation = mutableConfirmationPack => {\n  // eslint-disable-next-line no-unused-vars\n  var defer = mutableConfirmationPack.defer,\n      promiseResolved = mutableConfirmationPack.promiseResolved,\n      result = mutableConfirmationPack.result,\n      _klaytnCall = mutableConfirmationPack._klaytnCall; // first check if we already have a confirmed transaction\n\n  _klaytnCall.getTransactionReceipt(result).then(receipt => {\n    if (receipt && receipt.blockHash) {\n      // `isPolling` is false in default.\n      checkConfirmation(mutableConfirmationPack, receipt, false);\n    } else if (!promiseResolved) startWatching(mutableConfirmationPack, receipt);\n  }).catch(() => {\n    if (!promiseResolved) startWatching(mutableConfirmationPack);\n  });\n}; // start watching for confirmation depending on the support features of the provider\n\n\nvar startWatching = function startWatching(mutableConfirmationPack, existingReceipt) {\n  // eslint-disable-next-line no-unused-vars\n  var _klaytnCall = mutableConfirmationPack._klaytnCall,\n      intervalId = mutableConfirmationPack.intervalId,\n      method = mutableConfirmationPack.method; // if provider allows PUB/SUB\n\n  if (method.requestManager.provider.supportsSubscriptions()) {\n    _klaytnCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, false));\n  } else {\n    mutableConfirmationPack.intervalId = setInterval(checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, true), 1000);\n  }\n}; // fire \"receipt\" and confirmation events and resolve after\n\n\nvar checkConfirmation = function checkConfirmation(mutableConfirmationPack, existingReceipt, isPolling, err, blockHeader, sub) {\n  var intervalId = mutableConfirmationPack.intervalId,\n      defer = mutableConfirmationPack.defer,\n      method = mutableConfirmationPack.method,\n      canUnsubscribe = mutableConfirmationPack.canUnsubscribe,\n      _klaytnCall = mutableConfirmationPack._klaytnCall,\n      isContractDeployment = mutableConfirmationPack.isContractDeployment,\n      promiseResolved = mutableConfirmationPack.promiseResolved,\n      timeoutCount = mutableConfirmationPack.timeoutCount,\n      result = mutableConfirmationPack.result;\n\n  if (err) {\n    sub.unsubscribe();\n    mutableConfirmationPack.promiseResolved = true;\n\n    utils._fireError({\n      message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n      data: err\n    }, defer.eventEmitter, defer.reject);\n\n    return;\n  } // create fake unsubscribe\n\n\n  sub = sub || {\n    unsubscribe: () => clearInterval(mutableConfirmationPack.intervalId)\n  }; // if we have a valid receipt we don't need to send a request\n\n  return (existingReceipt && utils.promiEvent.resolve(existingReceipt) || _klaytnCall.getTransactionReceipt(result)). // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n  then(receipt => {\n    checkIsReceiptInBlock(receipt);\n    var formattedReceipt = formatReceipt(receipt, method);\n    if (mutableConfirmationPack.promiseResolved) return;\n    return isContractDeployment ? checkForContractDeployment(mutableConfirmationPack, formattedReceipt, sub) : checkForNormalTx(mutableConfirmationPack, formattedReceipt, sub);\n  }).catch(countTimeout);\n};\n\nvar checkIsReceiptInBlock = receipt => {\n  if (receipt && !receipt.blockHash) throw errors.blockHashNull;\n};\n\nvar formatReceipt = (receipt, method) => {\n  if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n    receipt = method.extraFormatters.receiptFormatter(receipt);\n  }\n\n  return receipt;\n};\n\nvar countTimeout = (mutableConfirmationPack, isPolling, sub) => {\n  // eslint-disable-next-line no-unused-vars\n  var defer = mutableConfirmationPack.defer,\n      timeoutCount = mutableConfirmationPack.timeoutCount,\n      promiseResolved = mutableConfirmationPack.promiseResolved; // time out the transaction if not mined after 50 blocks\n\n  mutableConfirmationPack.timeoutCount++; // check to see if we are http polling\n\n  if (isPolling) {\n    // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n    if (mutableConfirmationPack.timeoutCount - 1 >= POLLINGTIMEOUT) {\n      sub.unsubscribe();\n      mutableConfirmationPack.promiseResolved = true;\n\n      utils._fireError(new Error(\"Transaction was not mined within\".concat(POLLINGTIMEOUT, \" seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!\")), defer.eventEmitter, defer.reject);\n    }\n  } else if (mutableConfirmationPack.timeoutCount - 1 >= TIMEOUTBLOCK) {\n    sub.unsubscribe();\n    mutableConfirmationPack.promiseResolved = true;\n\n    utils._fireError(new Error('Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'), defer.eventEmitter, defer.reject);\n  }\n};\n\nvar checkForContractDeployment = (mutableConfirmationPack, receipt, sub) => {\n  // eslint-disable-next-line no-unused-vars\n  var defer = mutableConfirmationPack.defer,\n      method = mutableConfirmationPack.method,\n      canUnsubscribe = mutableConfirmationPack.canUnsubscribe,\n      _klaytnCall = mutableConfirmationPack._klaytnCall,\n      promiseResolved = mutableConfirmationPack.promiseResolved; // If contract address doesn't exist, fire error.\n\n  if (!receipt.contractAddress) {\n    if (canUnsubscribe) {\n      sub.unsubscribe();\n      mutableConfirmationPack.promiseResolved = true;\n    }\n\n    utils._fireError(errors.receiptDidntContainContractAddress, defer.eventEmitter, defer.reject);\n\n    return;\n  }\n\n  _klaytnCall.getCode(receipt.contractAddress, (e, code) => {\n    if (!code) return;\n\n    if (code.length > 2) {\n      defer.eventEmitter.emit('receipt', receipt); // if contract, return instance instead of receipt\n\n      defer.resolve(method.extraFormatters && method.extraFormatters.contractDeployFormatter && method.extraFormatters.contractDeployFormatter(receipt) || receipt); // need to remove listeners, as they aren't removed automatically when succesfull\n\n      if (canUnsubscribe) defer.eventEmitter.removeAllListeners();\n    } else {\n      // code.length <= 2 means, contract code couldn't be stored.\n      utils._fireError(errors.contractCouldntBeStored, defer.eventEmitter, defer.reject);\n    }\n\n    if (canUnsubscribe) sub.unsubscribe();\n    mutableConfirmationPack.promiseResolved = true;\n  });\n\n  return receipt;\n};\n\nvar checkForNormalTx = (mutableConfirmationPack, receipt, sub) => {\n  // eslint-disable-next-line no-unused-vars\n  var defer = mutableConfirmationPack.defer,\n      canUnsubscribe = mutableConfirmationPack.canUnsubscribe,\n      promiseResolved = mutableConfirmationPack.promiseResolved,\n      gasProvided = mutableConfirmationPack.gasProvided;\n\n  if (receipt && !receipt.outOfGas && (!gasProvided || gasProvided !== receipt.gasUsed) && (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')) {\n    // Happy case: transaction is processed well. A.K.A 'well-done receipt'.\n    try {\n      mutableConfirmationPack.defer.eventEmitter.emit('receipt', receipt);\n      mutableConfirmationPack.defer.resolve(receipt);\n    } catch (e) {\n      console.log('receipt error', e);\n    } // need to remove listeners, as they aren't removed automatically when succesfull\n\n\n    if (canUnsubscribe) {\n      mutableConfirmationPack.defer.eventEmitter.removeAllListeners();\n    }\n  } else {\n    // Unhappy case: trasaction has error. A.K.A 'bad receipt'.\n    if (!receipt) return;\n    var receiptJSON = JSON.stringify(receipt, null, 2);\n    var txError = receipt.txError;\n\n    if (txError && errors.txErrorTable[txError]) {\n      utils._fireError(new Error(\"\".concat(errors.txErrorTable[txError], \"\\n \").concat(receiptJSON)), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    } else if (receipt.status === false || receipt.status === '0x0') {\n      utils._fireError(errors.transactionReverted(receiptJSON), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    } else if (receipt.gasUsed >= gasProvided) {\n      utils._fireError(errors.transactionRanOutOfGas(receiptJSON), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    } else {\n      utils._fireError(errors.transactionRanOutOfGas(receiptJSON), mutableConfirmationPack.defer.eventEmitter, mutableConfirmationPack.defer.reject);\n    }\n  }\n\n  if (canUnsubscribe) sub.unsubscribe();\n  mutableConfirmationPack.promiseResolved = true;\n};\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\n\n\nfunction request(...args) {\n  var payload = this.toPayload(args);\n  payload.format = this.formatOutput.bind(this);\n  return payload;\n}\n\nmodule.exports = Method;","map":{"version":3,"sources":["C:/Users/MONK/Desktop/Cryptoberry(db)/client/node_modules/caver-js/packages/caver-core-method/src/index.js"],"names":["_","require","errors","formatters","utils","Subscriptions","subscriptions","validateParams","validateFunction","TIMEOUTBLOCK","AVERAGE_BLOCK_TIME","POLLINGTIMEOUT","Method","options","call","name","needNameCallPropertyToCreateMethod","hexCall","params","inputFormatter","outputFormatter","transformPayload","extraFormatters","requestManager","accounts","defaultBlock","defaultAccount","prototype","setRequestManager","createFunction","attachToObject","getCall","extractCallback","validateArgs","formatInput","formatOutput","toPayload","buildCall","_confirmTransaction","request","func","obj","split","callName","optionalName","args","isHexParameter","isFunction","length","pop","InvalidNumberOfParams","_this","isEmpty","map","formatter","index","result","_formatOutput","res","isArray","callback","inputParams","payload","method","buildSendTxCallbackFunc","defer","isSendTx","err","e","Error","_fireError","error","eventEmitter","reject","resolve","emit","buildSendSignedTxFunc","sendTxCallback","sign","signedPayload","extend","rawTransaction","send","buildSendRequestFunc","sendSignedTx","transaction","isObject","getRawTransactionWithSignatures","then","catch","wallet","tx","addressToUse","from","senderRawTransaction","feePayer","console","log","getAccount","privateKey","_getRoleKey","signTransaction","signatures","undefined","type","data","signature","buildSendFunc","promiEvent","sendRequest","isGasPriceInputMissing","gasPrice","getGasPrice","bind","payloadTxObject","mutableConfirmationPack","promiseResolved","canUnsubscribe","timeoutCount","intervalId","gasProvided","gas","isContractDeployment","_klaytnCall","addCustomSendMethod","kickoffConfirmation","customSendMethods","outputTransactionReceiptFormatter","inputAddressFormatter","inputDefaultBlockNumberFormatter","newBlockHeaders","subscriptionName","outputBlockFormatter","each","mthd","getTransactionReceipt","receipt","blockHash","checkConfirmation","startWatching","existingReceipt","provider","supportsSubscriptions","subscribe","setInterval","isPolling","blockHeader","sub","unsubscribe","message","clearInterval","checkIsReceiptInBlock","formattedReceipt","formatReceipt","checkForContractDeployment","checkForNormalTx","countTimeout","blockHashNull","receiptFormatter","contractAddress","receiptDidntContainContractAddress","getCode","code","contractDeployFormatter","removeAllListeners","contractCouldntBeStored","outOfGas","gasUsed","status","receiptJSON","JSON","stringify","txError","txErrorTable","transactionReverted","transactionRanOutOfGas","format","module","exports"],"mappings":";;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,IAAMA,CAAC,GAAGC,OAAO,CAAC,QAAD,CAAjB;;AACA,IAAMC,MAAM,GAAGD,OAAO,CAAC,0BAAD,CAAP,CAAoCC,MAAnD;;AACA,IAAMC,UAAU,GAAGF,OAAO,CAAC,0BAAD,CAAP,CAAoCE,UAAvD;;AACA,IAAMC,KAAK,GAAGH,OAAO,CAAC,mBAAD,CAArB;;AACA,IAAMI,aAAa,GAAGJ,OAAO,CAAC,gCAAD,CAAP,CAA0CK,aAAhE;;AACA,IAAMC,cAAc,GAAGN,OAAO,CAAC,0BAAD,CAAP,CAAoCO,gBAApC,CAAqDD,cAA5E;;AAEA,IAAME,YAAY,GAAG,EAArB;AACA,IAAMC,kBAAkB,GAAG,CAA3B,C,CAA6B;;AAC7B,IAAMC,cAAc,GAAGD,kBAAkB,GAAGD,YAA5C,C,CAAyD;;AAEzD,SAASG,MAAT,CAAgBC,OAAhB,EAAyB;AACrB;AACA,MAAI,CAACA,OAAO,CAACC,IAAT,IAAiB,CAACD,OAAO,CAACE,IAA9B,EAAoC,MAAMb,MAAM,CAACc,kCAAb;AAEpC,OAAKD,IAAL,GAAYF,OAAO,CAACE,IAApB;AACA,OAAKD,IAAL,GAAYD,OAAO,CAACC,IAApB;AACA,OAAKG,OAAL,GAAeJ,OAAO,CAACI,OAAvB;AACA,OAAKC,MAAL,GAAcL,OAAO,CAACK,MAAR,IAAkB,CAAhC;AACA,OAAKC,cAAL,GAAsBN,OAAO,CAACM,cAAR,IAA0B,EAAhD;AACA,OAAKC,eAAL,GAAuBP,OAAO,CAACO,eAA/B;AACA,OAAKC,gBAAL,GAAwBR,OAAO,CAACQ,gBAAhC;AACA,OAAKC,eAAL,GAAuBT,OAAO,CAACS,eAA/B;AAEA,OAAKC,cAAL,GAAsBV,OAAO,CAACU,cAA9B,CAbqB,CAerB;;AACA,OAAKC,QAAL,GAAgBX,OAAO,CAACW,QAAxB;AAEA,OAAKC,YAAL,GAAoBZ,OAAO,CAACY,YAAR,IAAwB,QAA5C;AACA,OAAKC,cAAL,GAAsBb,OAAO,CAACa,cAAR,IAA0B,IAAhD;AACH;;AAEDd,MAAM,CAACe,SAAP,CAAiBC,iBAAjB,GAAqCA,iBAArC;AACAhB,MAAM,CAACe,SAAP,CAAiBE,cAAjB,GAAkCA,cAAlC;AACAjB,MAAM,CAACe,SAAP,CAAiBG,cAAjB,GAAkCA,cAAlC;AACAlB,MAAM,CAACe,SAAP,CAAiBI,OAAjB,GAA2BA,OAA3B;AACAnB,MAAM,CAACe,SAAP,CAAiBK,eAAjB,GAAmCA,eAAnC;AACApB,MAAM,CAACe,SAAP,CAAiBM,YAAjB,GAAgCA,YAAhC;AACArB,MAAM,CAACe,SAAP,CAAiBO,WAAjB,GAA+BA,WAA/B;AACAtB,MAAM,CAACe,SAAP,CAAiBQ,YAAjB,GAAgCA,YAAhC;AACAvB,MAAM,CAACe,SAAP,CAAiBS,SAAjB,GAA6BA,SAA7B;AACAxB,MAAM,CAACe,SAAP,CAAiBU,SAAjB,GAA6BA,SAA7B;AACAzB,MAAM,CAACe,SAAP,CAAiBW,mBAAjB,GAAuCA,mBAAvC;AACA1B,MAAM,CAACe,SAAP,CAAiBY,OAAjB,GAA2BA,OAA3B;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASX,iBAAT,CAA2BL,cAA3B,EAA2CC,QAA3C,EAAqD;AACjD,OAAKD,cAAL,GAAsBA,cAAtB,CADiD,CAGjD;;AACA,MAAIC,QAAJ,EAAc,KAAKA,QAAL,GAAgBA,QAAhB;AACjB;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASK,cAAT,CAAwBN,cAAxB,EAAwCC,QAAxC,EAAkD;AAC9C;AACA,OAAKI,iBAAL,CAAuBL,cAAc,IAAI,KAAKA,cAA9C,EAA8DC,QAAQ,IAAI,KAAKA,QAA/E,EAF8C,CAI9C;;AACA,MAAMgB,IAAI,GAAG,KAAKH,SAAL,EAAb,CAL8C,CAO9C;AACA;;AACAG,EAAAA,IAAI,CAAC1B,IAAL,GAAY,KAAKA,IAAjB;AAEA,SAAO0B,IAAP;AACH;AAED;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASV,cAAT,CAAwBW,GAAxB,EAA6B;AACzB,MAAMD,IAAI,GAAG,KAAKH,SAAL,EAAb;AACAG,EAAAA,IAAI,CAAC1B,IAAL,GAAY,KAAKA,IAAjB;;AAFyB,yBAGQ,KAAKC,IAAL,CAAU2B,KAAV,CAAgB,GAAhB,CAHR;AAAA;AAAA,MAGlBC,QAHkB;AAAA,MAGRC,YAHQ;;AAKzB,MAAIA,YAAJ,EAAkB;AACdH,IAAAA,GAAG,CAACE,QAAD,CAAH,GAAgBF,GAAG,CAACE,QAAD,CAAH,IAAiB,EAAjC;AACAF,IAAAA,GAAG,CAACE,QAAD,CAAH,CAAcC,YAAd,IAA8BJ,IAA9B;AACH,GAHD,MAGO;AACHC,IAAAA,GAAG,CAACE,QAAD,CAAH,GAAgBH,IAAhB;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAST,OAAT,CAAiBc,IAAjB,EAAuB;AACnB;AACA;AACA;AACA,SAAO,KAAK5B,OAAL,IAAgBb,KAAK,CAAC0C,cAAN,CAAqBD,IAAI,CAAC,CAAD,CAAzB,CAAhB,GAAgD,KAAK5B,OAArD,GAA+D,KAAKH,IAA3E;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASkB,eAAT,CAAyBa,IAAzB,EAA+B;AAC3B,MAAI7C,CAAC,CAAC+C,UAAF,CAAaF,IAAI,CAACA,IAAI,CAACG,MAAL,GAAc,CAAf,CAAjB,CAAJ,EAAyC;AACrC,WAAOH,IAAI,CAACI,GAAL,EAAP,CADqC,CACnB;AACrB;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAShB,YAAT,CAAsBY,IAAtB,EAA4B;AACxB,MAAIA,IAAI,CAACG,MAAL,KAAgB,KAAK9B,MAAzB,EAAiC;AAC7B,UAAMhB,MAAM,CAACgD,qBAAP,CAA6BL,IAAI,CAACG,MAAlC,EAA0C,KAAK9B,MAA/C,EAAuD,KAAKH,IAA5D,CAAN;AACH;AACJ;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASmB,WAAT,CAAqBW,IAArB,EAA2B;AACvB,MAAMM,KAAK,GAAG,IAAd,CADuB,CAGvB;;;AACA,MAAI,CAAC,KAAKhC,cAAN,IAAwBnB,CAAC,CAACoD,OAAF,CAAU,KAAKjC,cAAf,CAA5B,EAA4D;AACxD,WAAO0B,IAAP;AACH,GANsB,CAQvB;;;AACA,SAAO,KAAK1B,cAAL,CAAoBkC,GAApB,CAAwB,CAACC,SAAD,EAAYC,KAAZ,KAAsB;AACjD;AACA,WAAQD,SAAS,IAAIA,SAAS,CAACxC,IAAV,CAAeqC,KAAf,EAAsBN,IAAI,CAACU,KAAD,CAA1B,CAAd,IAAqDV,IAAI,CAACU,KAAD,CAAhE;AACH,GAHM,CAAP;AAIH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASpB,YAAT,CAAsBqB,MAAtB,EAA8B;AAC1B,MAAML,KAAK,GAAG,IAAd,CAD0B,CAG1B;AACA;;;AACA,MAAMM,aAAa,GAAGC,GAAG,IAAK,OAAOP,KAAK,CAAC/B,eAAb,KAAiC,UAAjC,GAA8C+B,KAAK,CAAC/B,eAAN,CAAsBsC,GAAtB,CAA9C,GAA2EA,GAAzG,CAL0B,CAO1B;AACA;;;AACA,SAAO1D,CAAC,CAAC2D,OAAF,CAAUH,MAAV,IAAoBA,MAAM,CAACH,GAAP,CAAWI,aAAX,CAApB,GAAgDA,aAAa,CAACD,MAAD,CAApE;AACH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASpB,SAAT,CAAmBS,IAAnB,EAAyB;AACrB,MAAM/B,IAAI,GAAG,KAAKiB,OAAL,CAAac,IAAb,CAAb;AACA,MAAMe,QAAQ,GAAG,KAAK5B,eAAL,CAAqBa,IAArB,CAAjB;AACA,MAAMgB,WAAW,GAAG,KAAK3B,WAAL,CAAiBW,IAAjB,CAApB;AACA,OAAKZ,YAAL,CAAkB4B,WAAlB;AAEA,MAAMC,OAAO,GAAG;AACZC,IAAAA,MAAM,EAAEjD,IADI;AAEZI,IAAAA,MAAM,EAAE2C,WAFI;AAGZD,IAAAA;AAHY,GAAhB,CANqB,CAYrB;AACA;;AACA,SAAQ,KAAKvC,gBAAL,IAAyB,KAAKA,gBAAL,CAAsByC,OAAtB,CAA1B,IAA6DA,OAApE;AACH;;AAED,IAAME,uBAAuB,GAAG,CAACC,KAAD,EAAQF,MAAR,EAAgBD,OAAhB,EAAyBI,QAAzB,KAAsC,CAACC,GAAD,EAAMX,MAAN,KAAiB;AACnF,MAAI;AACAA,IAAAA,MAAM,GAAGO,MAAM,CAAC5B,YAAP,CAAoBqB,MAApB,CAAT;AACH,GAFD,CAEE,OAAOY,CAAP,EAAU;AACR,QAAI,CAACD,GAAL,EAAUA,GAAG,GAAGC,CAAN;AACb;;AAEDD,EAAAA,GAAG,GAAIX,MAAM,YAAYa,KAAlB,IAA2Bb,MAA5B,IAAuCW,GAA7C,CAPmF,CASnF;;AACA,MAAIA,GAAJ,EAAS;AACL,WAAO/D,KAAK,CAACkE,UAAN,CACHH,GAAG,CAACI,KAAJ,IAAaJ,GADV,EACe;AAClBF,IAAAA,KAAK,CAACO,YAFH,EAGHP,KAAK,CAACQ,MAHH,EAIHX,OAAO,CAACF,QAJL,CAAP;AAMH,GAjBkF,CAmBnF;;;AACA,MAAIE,OAAO,CAACF,QAAZ,EAAsBE,OAAO,CAACF,QAAR,CAAiB,IAAjB,EAAuBJ,MAAvB,EApB6D,CAsBnF;;AACA,MAAI,CAACU,QAAL,EAAe;AACXD,IAAAA,KAAK,CAACS,OAAN,CAAclB,MAAd;AACH,GAFD,MAEO;AACHS,IAAAA,KAAK,CAACO,YAAN,CAAmBG,IAAnB,CAAwB,iBAAxB,EAA2CnB,MAA3C;;AACAO,IAAAA,MAAM,CAACzB,mBAAP,CAA2B2B,KAA3B,EAAkCT,MAAlC,EAA0CM,OAA1C;AACH;AACJ,CA7BD;;AA+BA,IAAMc,qBAAqB,GAAG,CAACb,MAAD,EAASD,OAAT,EAAkBe,cAAlB,KAAqCC,IAAI,IAAI;AACvE,MAAMC,aAAa,GAAG/E,CAAC,CAACgF,MAAF,CAAS,EAAT,EAAalB,OAAb,EAAsB;AACxCC,IAAAA,MAAM,EAAE,yBADgC;AAExC7C,IAAAA,MAAM,EAAE,CAAC4D,IAAI,CAACG,cAAN;AAFgC,GAAtB,CAAtB;;AAKAlB,EAAAA,MAAM,CAACxC,cAAP,CAAsB2D,IAAtB,CAA2BH,aAA3B,EAA0CF,cAA1C;AACH,CAPD;;AASA,IAAMM,oBAAoB,GAAG,CAAClB,KAAD,EAAQmB,YAAR,EAAsBP,cAAtB,KAAyC,CAACf,OAAD,EAAUC,MAAV,KAAqB;AACvF;AACA;AACA;AACA;AACA;AACA,MAAIA,MAAM,IAAIA,MAAM,CAACvC,QAAjB,IAA6BsC,OAAO,CAACC,MAAR,KAAmB,yBAApD,EAA+E;AAC3E,QAAMsB,WAAW,GAAGvB,OAAO,CAAC5C,MAAR,CAAe,CAAf,CAApB;;AACA,QAAI,OAAOmE,WAAP,KAAuB,QAAvB,IAAmCrF,CAAC,CAACsF,QAAF,CAAWD,WAAX,CAAvC,EAAgE;AAC5D,UAAIA,WAAW,CAACJ,cAAhB,EAAgC;AAC5B,eAAOG,YAAY,CAACC,WAAD,CAAnB;AACH;;AACD,aAAOtB,MAAM,CAACvC,QAAP,CACF+D,+BADE,CAC8BF,WAD9B,EAEFG,IAFE,CAEGJ,YAFH,EAGFK,KAHE,CAGIrB,CAAC,IAAI;AACRS,QAAAA,cAAc,CAACT,CAAD,CAAd;AACH,OALE,CAAP;AAMH;AACJ;;AAED,MAAIL,MAAM,IAAIA,MAAM,CAACvC,QAAjB,IAA6BuC,MAAM,CAACvC,QAAP,CAAgBkE,MAA7C,IAAuD3B,MAAM,CAACvC,QAAP,CAAgBkE,MAAhB,CAAuB1C,MAAlF,EAA0F;AACtF,YAAQc,OAAO,CAACC,MAAhB;AACI,WAAK,sBAAL;AAA6B;AACzB,cAAM4B,EAAE,GAAG7B,OAAO,CAAC5C,MAAR,CAAe,CAAf,CAAX;AAEA,cAAIqD,KAAJ;;AACA,cAAI,CAACvE,CAAC,CAACsF,QAAF,CAAWK,EAAX,CAAL,EAAqB;AACjBd,YAAAA,cAAc,CAAC,IAAIR,KAAJ,CAAU,+CAAV,CAAD,CAAd;AACA;AACH;;AAED,cAAIuB,YAAY,GAAGD,EAAE,CAACE,IAAtB;;AAEA,cAAIF,EAAE,CAACG,oBAAH,IAA2BH,EAAE,CAACI,QAAlC,EAA4C;AACxCH,YAAAA,YAAY,GAAGD,EAAE,CAACI,QAAlB;;AACA,gBAAIJ,EAAE,CAACE,IAAP,EAAa;AACTG,cAAAA,OAAO,CAACC,GAAR,CAAY,oDAAZ;AACA,qBAAON,EAAE,CAACE,IAAV;AACH;AACJ;;AAED,cAAIH,MAAJ;;AAEA,cAAI;AACAA,YAAAA,MAAM,GAAG3B,MAAM,CAACvC,QAAP,CAAgBkE,MAAhB,CAAuBQ,UAAvB,CAAkCN,YAAlC,CAAT;AACH,WAFD,CAEE,OAAOxB,CAAP,EAAU;AACRS,YAAAA,cAAc,CAACT,CAAD,CAAd;AACA;AACH;;AAED,cAAIsB,MAAM,IAAIA,MAAM,CAACS,UAArB,EAAiC;AAC7B,gBAAMA,UAAU,GAAGpC,MAAM,CAACvC,QAAP,CAAgB4E,WAAhB,CAA4BT,EAA5B,EAAgCD,MAAhC,CAAnB,CAD6B,CAE7B;;;AACA,mBAAO3B,MAAM,CAACvC,QAAP,CACF6E,eADE,CACcV,EADd,EACkBQ,UADlB,EAEFX,IAFE,CAEGJ,YAFH,EAGFK,KAHE,CAGIrB,CAAC,IAAI;AACRS,cAAAA,cAAc,CAACT,CAAD,CAAd;AACH,aALE,CAAP;AAMH;;AACD,cAAIuB,EAAE,CAACW,UAAP,EAAmB;AACf;AACA;AACA,mBAAOvC,MAAM,CAACvC,QAAP,CACF+D,+BADE,CAC8BI,EAD9B,EAEFH,IAFE,CAEGJ,YAFH,EAGFK,KAHE,CAGIrB,CAAC,IAAI;AACRS,cAAAA,cAAc,CAACT,CAAD,CAAd;AACH,aALE,CAAP;AAMH,WA/CwB,CAiDzB;AACA;;;AACA,cAAIuB,EAAE,CAACI,QAAH,KAAgBQ,SAAhB,IAA8BZ,EAAE,CAACa,IAAH,KAAYD,SAAZ,IAAyBZ,EAAE,CAACa,IAAH,KAAY,QAAvE,EAAkF;AAC9EjC,YAAAA,KAAK,GAAG,IAAIF,KAAJ,oKACwJuB,YADxJ,8BAAR;AAGAf,YAAAA,cAAc,CAACN,KAAD,CAAd;AACA;AACH;;AAEDA,UAAAA,KAAK,GAAGhE,cAAc,CAACoF,EAAD,CAAtB;;AACA,cAAIpB,KAAJ,EAAW;AACPM,YAAAA,cAAc,CAACN,KAAD,CAAd;AACA;AACH;;AACD;AACH;;AACD,WAAK,WAAL;AAAkB;AACd,cAAMkC,IAAI,GAAG3C,OAAO,CAAC5C,MAAR,CAAe,CAAf,CAAb;;AACA,cAAMwE,OAAM,GAAG3B,MAAM,CAACvC,QAAP,CAAgBkE,MAAhB,CAAuBQ,UAAvB,CAAkCpC,OAAO,CAAC5C,MAAR,CAAe,CAAf,CAAlC,CAAf;;AAEA,cAAIwE,OAAM,IAAIA,OAAM,CAACS,UAArB,EAAiC;AAC7B;AACA,gBAAMrB,IAAI,GAAGf,MAAM,CAACvC,QAAP,CAAgBsD,IAAhB,CAAqB2B,IAArB,EAA2Bf,OAAM,CAACS,UAAlC,CAAb;AAEA,gBAAIrC,OAAO,CAACF,QAAZ,EAAsBE,OAAO,CAACF,QAAR,CAAiB,IAAjB,EAAuBkB,IAAI,CAAC4B,SAA5B;AAEtBzC,YAAAA,KAAK,CAACS,OAAN,CAAcI,IAAI,CAAC4B,SAAnB;AACA;AACH;;AACD;AACH;AAjFL;AAmFH;;AAED,SAAO3C,MAAM,CAACxC,cAAP,CAAsB2D,IAAtB,CAA2BpB,OAA3B,EAAoCe,cAApC,CAAP;AACH,CA5GD;;AA8GA,IAAM8B,aAAa,GAAG,CAAC5C,MAAD,EAASG,QAAT,KAAsB,CAAC,GAAGrB,IAAJ,KAAa;AACrD,MAAMoB,KAAK,GAAG7D,KAAK,CAACwG,UAAN,CAAiB,CAAC1C,QAAlB,CAAd;AACA,MAAMJ,OAAO,GAAGC,MAAM,CAAC3B,SAAP,CAAiBS,IAAjB,CAAhB;AAEA,MAAMgC,cAAc,GAAGb,uBAAuB,CAACC,KAAD,EAAQF,MAAR,EAAgBD,OAAhB,EAAyBI,QAAzB,CAA9C;AACA,MAAMkB,YAAY,GAAGR,qBAAqB,CAACb,MAAD,EAASD,OAAT,EAAkBe,cAAlB,CAA1C;AACA,MAAMgC,WAAW,GAAG1B,oBAAoB,CAAClB,KAAD,EAAQmB,YAAR,EAAsBP,cAAtB,CAAxC;AAEA,MAAMiC,sBAAsB,GAAG5C,QAAQ,IAAIlE,CAAC,CAACsF,QAAF,CAAWxB,OAAO,CAAC5C,MAAR,CAAe,CAAf,CAAX,CAAZ,IAA6C4C,OAAO,CAAC5C,MAAR,CAAe,CAAf,EAAkB6F,QAAlB,KAA+BR,SAA3G,CARqD,CAUrD;;AACA,MAAI,CAACO,sBAAL,EAA6B;AACzBD,IAAAA,WAAW,CAAC/C,OAAD,EAAUC,MAAV,CAAX;AACA,WAAOE,KAAK,CAACO,YAAb;AACH;;AAED,MAAMwC,WAAW,GAAG,IAAIpG,MAAJ,CAAW;AAC3BG,IAAAA,IAAI,EAAE,aADqB;AAE3BD,IAAAA,IAAI,EAAE,eAFqB;AAG3BI,IAAAA,MAAM,EAAE;AAHmB,GAAX,EAIjBW,cAJiB,CAIFkC,MAAM,CAACxC,cAJL,CAApB;AAMAyF,EAAAA,WAAW,CAAC,CAAC7C,GAAD,EAAM4C,QAAN,KAAmB;AAC3BjD,IAAAA,OAAO,CAAC5C,MAAR,CAAe,CAAf,EAAkB6F,QAAlB,GAA6BA,QAAQ,IAAIjD,OAAO,CAAC5C,MAAR,CAAe,CAAf,EAAkB6F,QAA3D;AACAF,IAAAA,WAAW,CAAC/C,OAAD,EAAUC,MAAV,CAAX;AACH,GAHU,CAAX;AAKA;AACJ;AACA;;AACI,SAAOE,KAAK,CAACO,YAAb;AACH,CA/BD;;AAiCA,SAASnC,SAAT,GAAqB;AACjB,MAAM0B,MAAM,GAAG,IAAf;AACA,MAAMG,QAAQ,GACVH,MAAM,CAACjD,IAAP,KAAgB,sBAAhB,IACAiD,MAAM,CAACjD,IAAP,KAAgB,yBADhB,IAEAiD,MAAM,CAACjD,IAAP,KAAgB,0BAFhB,IAGAiD,MAAM,CAACjD,IAAP,KAAgB,4BAHhB,IAIAiD,MAAM,CAACjD,IAAP,KAAgB,4BALpB;AAOA,MAAMoE,IAAI,GAAGyB,aAAa,CAAC5C,MAAD,EAASG,QAAT,CAA1B,CATiB,CAUjB;;AACAgB,EAAAA,IAAI,CAACnB,MAAL,GAAcA,MAAd,CAXiB,CAYjB;;AACAmB,EAAAA,IAAI,CAAC3C,OAAL,GAAe,KAAKA,OAAL,CAAa0E,IAAb,CAAkB,IAAlB,CAAf;AACA,SAAO/B,IAAP;AACH;;AAED,SAAS5C,mBAAT,CAA6B2B,KAA7B,EAAoCT,MAApC,EAA4CM,OAA5C,EAAqD;AACjD,MAAMoD,eAAe,GAAIpD,OAAO,CAAC5C,MAAR,IAAkBlB,CAAC,CAACsF,QAAF,CAAWxB,OAAO,CAAC5C,MAAR,CAAe,CAAf,CAAX,CAAlB,IAAmD4C,OAAO,CAAC5C,MAAR,CAAe,CAAf,CAApD,IAA0E,EAAlG,CADiD,CAGjD;AACA;AACA;AACA;;AACA,MAAMiG,uBAAuB,GAAG;AAC5BpD,IAAAA,MAAM,EAAE,IADoB;AAE5BqD,IAAAA,eAAe,EAAE,KAFW;AAG5BC,IAAAA,cAAc,EAAE,IAHY;AAI5BC,IAAAA,YAAY,EAAE,CAJc;AAK5BC,IAAAA,UAAU,EAAE,IALgB;AAM5BC,IAAAA,WAAW,EAAEN,eAAe,CAACO,GAAhB,IAAuB,IANR;AAO5BC,IAAAA,oBAAoB,EAAEtH,KAAK,CAACsH,oBAAN,CAA2BR,eAA3B,CAPM;AAQ5BjD,IAAAA,KAR4B;AAS5BT,IAAAA,MAT4B;AAU5BmE,IAAAA,WAAW,EAAE;AAVe,GAAhC;AAaAC,EAAAA,mBAAmB,CAACT,uBAAD,CAAnB;AAEAU,EAAAA,mBAAmB,CAACV,uBAAD,CAAnB;AACH;;AAED,IAAMS,mBAAmB,GAAGT,uBAAuB,IAAI;AACnD,MAAMW,iBAAiB,GAAG,CACtB,IAAIlH,MAAJ,CAAW;AACPG,IAAAA,IAAI,EAAE,uBADC;AAEPD,IAAAA,IAAI,EAAE,4BAFC;AAGPI,IAAAA,MAAM,EAAE,CAHD;AAIPE,IAAAA,eAAe,EAAEjB,UAAU,CAAC4H;AAJrB,GAAX,CADsB,EAOtB,IAAInH,MAAJ,CAAW;AACPG,IAAAA,IAAI,EAAE,SADC;AAEPD,IAAAA,IAAI,EAAE,cAFC;AAGPI,IAAAA,MAAM,EAAE,CAHD;AAIPC,IAAAA,cAAc,EAAE,CAAChB,UAAU,CAAC6H,qBAAZ,EAAmC7H,UAAU,CAAC8H,gCAA9C;AAJT,GAAX,CAPsB,EAatB,IAAI5H,aAAJ,CAAkB;AACdU,IAAAA,IAAI,EAAE,WADQ;AAEdyF,IAAAA,IAAI,EAAE,MAFQ;AAGdlG,IAAAA,aAAa,EAAE;AACX4H,MAAAA,eAAe,EAAE;AACbC,QAAAA,gBAAgB,EAAE,UADL;AACiB;AAC9BjH,QAAAA,MAAM,EAAE,CAFK;AAGbE,QAAAA,eAAe,EAAEjB,UAAU,CAACiI;AAHf;AADN;AAHD,GAAlB,CAbsB,CAA1B,CADmD,CA2BnD;;AACApI,EAAAA,CAAC,CAACqI,IAAF,CAAOP,iBAAP,EAA0BQ,IAAI,IAAI;AAC9B;AACAA,IAAAA,IAAI,CAACxG,cAAL,CAAoBqF,uBAAuB,CAACQ,WAA5C,EAF8B,CAG9B;;AACAW,IAAAA,IAAI,CAAC/G,cAAL,GAAsB4F,uBAAuB,CAACpD,MAAxB,CAA+BxC,cAArD;AACH,GALD;AAMH,CAlCD;;AAoCA,IAAMsG,mBAAmB,GAAGV,uBAAuB,IAAI;AACnD;AADmD,MAE3ClD,KAF2C,GAEKkD,uBAFL,CAE3ClD,KAF2C;AAAA,MAEpCmD,eAFoC,GAEKD,uBAFL,CAEpCC,eAFoC;AAAA,MAEnB5D,MAFmB,GAEK2D,uBAFL,CAEnB3D,MAFmB;AAAA,MAEXmE,WAFW,GAEKR,uBAFL,CAEXQ,WAFW,EAGnD;;AAEAA,EAAAA,WAAW,CACNY,qBADL,CAC2B/E,MAD3B,EAEKgC,IAFL,CAEUgD,OAAO,IAAI;AACb,QAAIA,OAAO,IAAIA,OAAO,CAACC,SAAvB,EAAkC;AAC9B;AACAC,MAAAA,iBAAiB,CAACvB,uBAAD,EAA0BqB,OAA1B,EAAmC,KAAnC,CAAjB;AACH,KAHD,MAGO,IAAI,CAACpB,eAAL,EAAsBuB,aAAa,CAACxB,uBAAD,EAA0BqB,OAA1B,CAAb;AAChC,GAPL,EAQK/C,KARL,CAQW,MAAM;AACT,QAAI,CAAC2B,eAAL,EAAsBuB,aAAa,CAACxB,uBAAD,CAAb;AACzB,GAVL;AAWH,CAhBD,C,CAkBA;;;AACA,IAAMwB,aAAa,GAAG,SAAhBA,aAAgB,CAASxB,uBAAT,EAAkCyB,eAAlC,EAAmD;AACrE;AADqE,MAE7DjB,WAF6D,GAEzBR,uBAFyB,CAE7DQ,WAF6D;AAAA,MAEhDJ,UAFgD,GAEzBJ,uBAFyB,CAEhDI,UAFgD;AAAA,MAEpCxD,MAFoC,GAEzBoD,uBAFyB,CAEpCpD,MAFoC,EAGrE;;AACA,MAAIA,MAAM,CAACxC,cAAP,CAAsBsH,QAAtB,CAA+BC,qBAA/B,EAAJ,EAA4D;AACxDnB,IAAAA,WAAW,CAACoB,SAAZ,CAAsB,iBAAtB,EAAyCL,iBAAiB,CAACzB,IAAlB,CAAuB,IAAvB,EAA6BE,uBAA7B,EAAsDyB,eAAtD,EAAuE,KAAvE,CAAzC;AACH,GAFD,MAEO;AACHzB,IAAAA,uBAAuB,CAACI,UAAxB,GAAqCyB,WAAW,CAACN,iBAAiB,CAACzB,IAAlB,CAAuB,IAAvB,EAA6BE,uBAA7B,EAAsDyB,eAAtD,EAAuE,IAAvE,CAAD,EAA+E,IAA/E,CAAhD;AACH;AACJ,CATD,C,CAWA;;;AAEA,IAAMF,iBAAiB,GAAG,SAApBA,iBAAoB,CAASvB,uBAAT,EAAkCyB,eAAlC,EAAmDK,SAAnD,EAA8D9E,GAA9D,EAAmE+E,WAAnE,EAAgFC,GAAhF,EAAqF;AAAA,MAGvG5B,UAHuG,GAavGJ,uBAbuG,CAGvGI,UAHuG;AAAA,MAIvGtD,KAJuG,GAavGkD,uBAbuG,CAIvGlD,KAJuG;AAAA,MAKvGF,MALuG,GAavGoD,uBAbuG,CAKvGpD,MALuG;AAAA,MAMvGsD,cANuG,GAavGF,uBAbuG,CAMvGE,cANuG;AAAA,MAOvGM,WAPuG,GAavGR,uBAbuG,CAOvGQ,WAPuG;AAAA,MASvGD,oBATuG,GAavGP,uBAbuG,CASvGO,oBATuG;AAAA,MAUvGN,eAVuG,GAavGD,uBAbuG,CAUvGC,eAVuG;AAAA,MAWvGE,YAXuG,GAavGH,uBAbuG,CAWvGG,YAXuG;AAAA,MAYvG9D,MAZuG,GAavG2D,uBAbuG,CAYvG3D,MAZuG;;AAe3G,MAAIW,GAAJ,EAAS;AACLgF,IAAAA,GAAG,CAACC,WAAJ;AACAjC,IAAAA,uBAAuB,CAACC,eAAxB,GAA0C,IAA1C;;AACAhH,IAAAA,KAAK,CAACkE,UAAN,CACI;AACI+E,MAAAA,OAAO,EAAE,iFADb;AAEI5C,MAAAA,IAAI,EAAEtC;AAFV,KADJ,EAKIF,KAAK,CAACO,YALV,EAMIP,KAAK,CAACQ,MANV;;AAQA;AACH,GA3B0G,CA6B3G;;;AACA0E,EAAAA,GAAG,GAAGA,GAAG,IAAI;AACTC,IAAAA,WAAW,EAAE,MAAME,aAAa,CAACnC,uBAAuB,CAACI,UAAzB;AADvB,GAAb,CA9B2G,CAkC3G;;AACA,SACI,CAAEqB,eAAe,IAAIxI,KAAK,CAACwG,UAAN,CAAiBlC,OAAjB,CAAyBkE,eAAzB,CAApB,IAAkEjB,WAAW,CAACY,qBAAZ,CAAkC/E,MAAlC,CAAnE,GACI;AACCgC,EAAAA,IAFL,CAEUgD,OAAO,IAAI;AACbe,IAAAA,qBAAqB,CAACf,OAAD,CAArB;AAEA,QAAMgB,gBAAgB,GAAGC,aAAa,CAACjB,OAAD,EAAUzE,MAAV,CAAtC;AAEA,QAAIoD,uBAAuB,CAACC,eAA5B,EAA6C;AAE7C,WAAOM,oBAAoB,GACrBgC,0BAA0B,CAACvC,uBAAD,EAA0BqC,gBAA1B,EAA4CL,GAA5C,CADL,GAErBQ,gBAAgB,CAACxC,uBAAD,EAA0BqC,gBAA1B,EAA4CL,GAA5C,CAFtB;AAGH,GAZL,EAaK1D,KAbL,CAaWmE,YAbX,CADJ;AAgBH,CAnDD;;AAqDA,IAAML,qBAAqB,GAAGf,OAAO,IAAI;AACrC,MAAIA,OAAO,IAAI,CAACA,OAAO,CAACC,SAAxB,EAAmC,MAAMvI,MAAM,CAAC2J,aAAb;AACtC,CAFD;;AAIA,IAAMJ,aAAa,GAAG,CAACjB,OAAD,EAAUzE,MAAV,KAAqB;AACvC,MAAIA,MAAM,CAACzC,eAAP,IAA0ByC,MAAM,CAACzC,eAAP,CAAuBwI,gBAArD,EAAuE;AACnEtB,IAAAA,OAAO,GAAGzE,MAAM,CAACzC,eAAP,CAAuBwI,gBAAvB,CAAwCtB,OAAxC,CAAV;AACH;;AACD,SAAOA,OAAP;AACH,CALD;;AAOA,IAAMoB,YAAY,GAAG,CAACzC,uBAAD,EAA0B8B,SAA1B,EAAqCE,GAArC,KAA6C;AAC9D;AAD8D,MAEtDlF,KAFsD,GAEbkD,uBAFa,CAEtDlD,KAFsD;AAAA,MAE/CqD,YAF+C,GAEbH,uBAFa,CAE/CG,YAF+C;AAAA,MAEjCF,eAFiC,GAEbD,uBAFa,CAEjCC,eAFiC,EAG9D;;AACAD,EAAAA,uBAAuB,CAACG,YAAxB,GAJ8D,CAM9D;;AACA,MAAI2B,SAAJ,EAAe;AACX;AACA,QAAI9B,uBAAuB,CAACG,YAAxB,GAAuC,CAAvC,IAA4C3G,cAAhD,EAAgE;AAC5DwI,MAAAA,GAAG,CAACC,WAAJ;AACAjC,MAAAA,uBAAuB,CAACC,eAAxB,GAA0C,IAA1C;;AACAhH,MAAAA,KAAK,CAACkE,UAAN,CACI,IAAID,KAAJ,2CACuC1D,cADvC,2GADJ,EAIIsD,KAAK,CAACO,YAJV,EAKIP,KAAK,CAACQ,MALV;AAOH;AACJ,GAbD,MAaO,IAAI0C,uBAAuB,CAACG,YAAxB,GAAuC,CAAvC,IAA4C7G,YAAhD,EAA8D;AACjE0I,IAAAA,GAAG,CAACC,WAAJ;AACAjC,IAAAA,uBAAuB,CAACC,eAAxB,GAA0C,IAA1C;;AACAhH,IAAAA,KAAK,CAACkE,UAAN,CACI,IAAID,KAAJ,CACI,yIADJ,CADJ,EAIIJ,KAAK,CAACO,YAJV,EAKIP,KAAK,CAACQ,MALV;AAOH;AACJ,CA/BD;;AAiCA,IAAMiF,0BAA0B,GAAG,CAACvC,uBAAD,EAA0BqB,OAA1B,EAAmCW,GAAnC,KAA2C;AAC1E;AAD0E,MAElElF,KAFkE,GAEFkD,uBAFE,CAElElD,KAFkE;AAAA,MAE3DF,MAF2D,GAEFoD,uBAFE,CAE3DpD,MAF2D;AAAA,MAEnDsD,cAFmD,GAEFF,uBAFE,CAEnDE,cAFmD;AAAA,MAEnCM,WAFmC,GAEFR,uBAFE,CAEnCQ,WAFmC;AAAA,MAEtBP,eAFsB,GAEFD,uBAFE,CAEtBC,eAFsB,EAI1E;;AACA,MAAI,CAACoB,OAAO,CAACuB,eAAb,EAA8B;AAC1B,QAAI1C,cAAJ,EAAoB;AAChB8B,MAAAA,GAAG,CAACC,WAAJ;AACAjC,MAAAA,uBAAuB,CAACC,eAAxB,GAA0C,IAA1C;AACH;;AAEDhH,IAAAA,KAAK,CAACkE,UAAN,CAAiBpE,MAAM,CAAC8J,kCAAxB,EAA4D/F,KAAK,CAACO,YAAlE,EAAgFP,KAAK,CAACQ,MAAtF;;AACA;AACH;;AAEDkD,EAAAA,WAAW,CAACsC,OAAZ,CAAoBzB,OAAO,CAACuB,eAA5B,EAA6C,CAAC3F,CAAD,EAAI8F,IAAJ,KAAa;AACtD,QAAI,CAACA,IAAL,EAAW;;AAEX,QAAIA,IAAI,CAAClH,MAAL,GAAc,CAAlB,EAAqB;AACjBiB,MAAAA,KAAK,CAACO,YAAN,CAAmBG,IAAnB,CAAwB,SAAxB,EAAmC6D,OAAnC,EADiB,CAGjB;;AACAvE,MAAAA,KAAK,CAACS,OAAN,CACKX,MAAM,CAACzC,eAAP,IACGyC,MAAM,CAACzC,eAAP,CAAuB6I,uBAD1B,IAEGpG,MAAM,CAACzC,eAAP,CAAuB6I,uBAAvB,CAA+C3B,OAA/C,CAFJ,IAGIA,OAJR,EAJiB,CAWjB;;AACA,UAAInB,cAAJ,EAAoBpD,KAAK,CAACO,YAAN,CAAmB4F,kBAAnB;AACvB,KAbD,MAaO;AACH;AACAhK,MAAAA,KAAK,CAACkE,UAAN,CAAiBpE,MAAM,CAACmK,uBAAxB,EAAiDpG,KAAK,CAACO,YAAvD,EAAqEP,KAAK,CAACQ,MAA3E;AACH;;AAED,QAAI4C,cAAJ,EAAoB8B,GAAG,CAACC,WAAJ;AACpBjC,IAAAA,uBAAuB,CAACC,eAAxB,GAA0C,IAA1C;AACH,GAvBD;;AAyBA,SAAOoB,OAAP;AACH,CAzCD;;AA2CA,IAAMmB,gBAAgB,GAAG,CAACxC,uBAAD,EAA0BqB,OAA1B,EAAmCW,GAAnC,KAA2C;AAChE;AADgE,MAExDlF,KAFwD,GAEAkD,uBAFA,CAExDlD,KAFwD;AAAA,MAEjDoD,cAFiD,GAEAF,uBAFA,CAEjDE,cAFiD;AAAA,MAEjCD,eAFiC,GAEAD,uBAFA,CAEjCC,eAFiC;AAAA,MAEhBI,WAFgB,GAEAL,uBAFA,CAEhBK,WAFgB;;AAIhE,MACIgB,OAAO,IACP,CAACA,OAAO,CAAC8B,QADT,KAEC,CAAC9C,WAAD,IAAgBA,WAAW,KAAKgB,OAAO,CAAC+B,OAFzC,MAGC/B,OAAO,CAACgC,MAAR,KAAmB,IAAnB,IAA2BhC,OAAO,CAACgC,MAAR,KAAmB,KAA9C,IAAuD,OAAOhC,OAAO,CAACgC,MAAf,KAA0B,WAHlF,CADJ,EAKE;AACE;AACA,QAAI;AACArD,MAAAA,uBAAuB,CAAClD,KAAxB,CAA8BO,YAA9B,CAA2CG,IAA3C,CAAgD,SAAhD,EAA2D6D,OAA3D;AACArB,MAAAA,uBAAuB,CAAClD,KAAxB,CAA8BS,OAA9B,CAAsC8D,OAAtC;AACH,KAHD,CAGE,OAAOpE,CAAP,EAAU;AACR4B,MAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6B7B,CAA7B;AACH,KAPH,CASE;;;AACA,QAAIiD,cAAJ,EAAoB;AAChBF,MAAAA,uBAAuB,CAAClD,KAAxB,CAA8BO,YAA9B,CAA2C4F,kBAA3C;AACH;AACJ,GAlBD,MAkBO;AACH;AACA,QAAI,CAAC5B,OAAL,EAAc;AACd,QAAMiC,WAAW,GAAGC,IAAI,CAACC,SAAL,CAAenC,OAAf,EAAwB,IAAxB,EAA8B,CAA9B,CAApB;AAHG,QAKKoC,OALL,GAKiBpC,OALjB,CAKKoC,OALL;;AAMH,QAAIA,OAAO,IAAI1K,MAAM,CAAC2K,YAAP,CAAoBD,OAApB,CAAf,EAA6C;AACzCxK,MAAAA,KAAK,CAACkE,UAAN,CACI,IAAID,KAAJ,WAAanE,MAAM,CAAC2K,YAAP,CAAoBD,OAApB,CAAb,gBAA+CH,WAA/C,EADJ,EAEItD,uBAAuB,CAAClD,KAAxB,CAA8BO,YAFlC,EAGI2C,uBAAuB,CAAClD,KAAxB,CAA8BQ,MAHlC;AAKH,KAND,MAMO,IAAI+D,OAAO,CAACgC,MAAR,KAAmB,KAAnB,IAA4BhC,OAAO,CAACgC,MAAR,KAAmB,KAAnD,EAA0D;AAC7DpK,MAAAA,KAAK,CAACkE,UAAN,CACIpE,MAAM,CAAC4K,mBAAP,CAA2BL,WAA3B,CADJ,EAEItD,uBAAuB,CAAClD,KAAxB,CAA8BO,YAFlC,EAGI2C,uBAAuB,CAAClD,KAAxB,CAA8BQ,MAHlC;AAKH,KANM,MAMA,IAAI+D,OAAO,CAAC+B,OAAR,IAAmB/C,WAAvB,EAAoC;AACvCpH,MAAAA,KAAK,CAACkE,UAAN,CACIpE,MAAM,CAAC6K,sBAAP,CAA8BN,WAA9B,CADJ,EAEItD,uBAAuB,CAAClD,KAAxB,CAA8BO,YAFlC,EAGI2C,uBAAuB,CAAClD,KAAxB,CAA8BQ,MAHlC;AAKH,KANM,MAMA;AACHrE,MAAAA,KAAK,CAACkE,UAAN,CACIpE,MAAM,CAAC6K,sBAAP,CAA8BN,WAA9B,CADJ,EAEItD,uBAAuB,CAAClD,KAAxB,CAA8BO,YAFlC,EAGI2C,uBAAuB,CAAClD,KAAxB,CAA8BQ,MAHlC;AAKH;AACJ;;AAED,MAAI4C,cAAJ,EAAoB8B,GAAG,CAACC,WAAJ;AACpBjC,EAAAA,uBAAuB,CAACC,eAAxB,GAA0C,IAA1C;AACH,CAzDD;AA2DA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAAS7E,OAAT,CAAiB,GAAGM,IAApB,EAA0B;AACtB,MAAMiB,OAAO,GAAG,KAAK1B,SAAL,CAAeS,IAAf,CAAhB;AACAiB,EAAAA,OAAO,CAACkH,MAAR,GAAiB,KAAK7I,YAAL,CAAkB8E,IAAlB,CAAuB,IAAvB,CAAjB;AACA,SAAOnD,OAAP;AACH;;AAEDmH,MAAM,CAACC,OAAP,GAAiBtK,MAAjB","sourcesContent":["/*\n    Modifications copyright 2018 The caver-js Authors\n    This file is part of web3.js.\n\n    web3.js is free software: you can redistribute it and/or modify\n    it under the terms of the GNU Lesser General Public License as published by\n    the Free Software Foundation, either version 3 of the License, or\n    (at your option) any later version.\n\n    web3.js is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU Lesser General Public License for more details.\n\n    You should have received a copy of the GNU Lesser General Public License\n    along with web3.js.  If not, see <http://www.gnu.org/licenses/>.\n\n    This file is derived from web3.js/packages/web3-core-method/src/index.js (2019/06/12).\n    Modified and improved for the caver-js development.\n*/\n/**\n * @file index.js\n * @author Fabian Vogelsteller <fabian@ethereum.org>\n * @author Marek Kotewicz <marek@parity.io>\n * @date 2017\n */\n\nconst _ = require('lodash')\nconst errors = require('../../caver-core-helpers').errors\nconst formatters = require('../../caver-core-helpers').formatters\nconst utils = require('../../caver-utils')\nconst Subscriptions = require('../../caver-core-subscriptions').subscriptions\nconst validateParams = require('../../caver-core-helpers').validateFunction.validateParams\n\nconst TIMEOUTBLOCK = 50\nconst AVERAGE_BLOCK_TIME = 1 // 1s\nconst POLLINGTIMEOUT = AVERAGE_BLOCK_TIME * TIMEOUTBLOCK // ~average block time (seconds) * TIMEOUTBLOCK\n\nfunction Method(options) {\n    // call, name should be existed to create a method.\n    if (!options.call || !options.name) throw errors.needNameCallPropertyToCreateMethod\n\n    this.name = options.name\n    this.call = options.call\n    this.hexCall = options.hexCall\n    this.params = options.params || 0\n    this.inputFormatter = options.inputFormatter || []\n    this.outputFormatter = options.outputFormatter\n    this.transformPayload = options.transformPayload\n    this.extraFormatters = options.extraFormatters\n\n    this.requestManager = options.requestManager\n\n    // reference to klay.accounts\n    this.accounts = options.accounts\n\n    this.defaultBlock = options.defaultBlock || 'latest'\n    this.defaultAccount = options.defaultAccount || null\n}\n\nMethod.prototype.setRequestManager = setRequestManager\nMethod.prototype.createFunction = createFunction\nMethod.prototype.attachToObject = attachToObject\nMethod.prototype.getCall = getCall\nMethod.prototype.extractCallback = extractCallback\nMethod.prototype.validateArgs = validateArgs\nMethod.prototype.formatInput = formatInput\nMethod.prototype.formatOutput = formatOutput\nMethod.prototype.toPayload = toPayload\nMethod.prototype.buildCall = buildCall\nMethod.prototype._confirmTransaction = _confirmTransaction\nMethod.prototype.request = request\n\n/**\n * Set requestManager for rpc calling.\n * If it has accounts parameter also, set it.\n * @method setRequestManager\n * @param  {Object} requestManager\n * @param  {Object} accounts\n */\nfunction setRequestManager(requestManager, accounts) {\n    this.requestManager = requestManager\n\n    // reference to klay.accounts\n    if (accounts) this.accounts = accounts\n}\n\n/**\n * createFunction through 'this' context (= instance by created through new Method(...))\n * @method createFunction\n * @param  {Object} requestManager\n * @param  {Object} accounts\n * @return {Function} it will be used for sending RPC call.\n */\nfunction createFunction(requestManager, accounts) {\n    // set requestManager for method individulally.\n    this.setRequestManager(requestManager || this.requestManager, accounts || this.accounts)\n\n    // this.buildCall() returns function `send = function() { ... }`\n    const func = this.buildCall()\n\n    // call is directly used for rpc calling,\n    // ex) 'klay_sendTransaction'\n    func.call = this.call\n\n    return func\n}\n\n/**\n * attach buildCalled method to 'obj' object,\n * by adding a property name through this.name\n * @method attachToObject\n * @param  {Object} obj\n */\nfunction attachToObject(obj) {\n    const func = this.buildCall()\n    func.call = this.call\n    const [callName, optionalName] = this.name.split('.')\n\n    if (optionalName) {\n        obj[callName] = obj[callName] || {}\n        obj[callName][optionalName] = func\n    } else {\n        obj[callName] = func\n    }\n}\n\n/**\n * Should be used to determine name of the jsonrpc method based on arguments\n *\n * @method getCall\n * @param {Array} arguments\n * @return {String} name of jsonrpc method\n */\nfunction getCall(args) {\n    // If hexCall is defined, args[0] type is truly hexParameter, return this.hexCall\n    // If not, return this.call\n    // 'this.call', 'this.hexCall' are defined in rpc.json\n    return this.hexCall && utils.isHexParameter(args[0]) ? this.hexCall : this.call\n}\n\n/**\n * Should be used to extract callback from array of arguments.\n * (caution) It modifies input param.\n *\n * @method extractCallback\n * @param {Array} arguments\n * @return {Function|Null} callback, if exists\n */\nfunction extractCallback(args) {\n    if (_.isFunction(args[args.length - 1])) {\n        return args.pop() // 'pop' method modifies the original args array!\n    }\n}\n\n/**\n * Should be called to check if the number of arguments is correct\n *\n * @method validateArgs\n * @param {Array} arguments\n * @throws {Error} if it is not\n */\nfunction validateArgs(args) {\n    if (args.length !== this.params) {\n        throw errors.InvalidNumberOfParams(args.length, this.params, this.name)\n    }\n}\n\n/**\n * Should be called to format input args of method\n *\n * @method formatInput\n * @param {Array}\n * @return {Array}\n */\nfunction formatInput(args) {\n    const _this = this\n\n    // If inputFormatter is not defined, or empty just return original args.\n    if (!this.inputFormatter || _.isEmpty(this.inputFormatter)) {\n        return args\n    }\n\n    // If inputFormatter is defined, map original args by calling formatter.\n    return this.inputFormatter.map((formatter, index) => {\n        // bind this for defaultBlock, and defaultAccount\n        return (formatter && formatter.call(_this, args[index])) || args[index]\n    })\n}\n\n/**\n * Should be called to format output(result) of method\n *\n * @method formatOutput\n * @param {Object}\n * @return {Object}\n */\nfunction formatOutput(result) {\n    const _this = this\n\n    // If outputFormatter is defined, calling outputFormatter,\n    // If not, just return original res.\n    const _formatOutput = res => (typeof _this.outputFormatter === 'function' ? _this.outputFormatter(res) : res)\n\n    // If result is array, map it through calling _formatOuput\n    // If result is single, just calling _formatOutput.\n    return _.isArray(result) ? result.map(_formatOutput) : _formatOutput(result)\n}\n\n/**\n * Should create payload from given input args\n *\n * @method toPayload\n * @param {Array} args\n * @return {Object}\n */\nfunction toPayload(args) {\n    const call = this.getCall(args)\n    const callback = this.extractCallback(args)\n    const inputParams = this.formatInput(args)\n    this.validateArgs(inputParams)\n\n    const payload = {\n        method: call,\n        params: inputParams,\n        callback,\n    }\n\n    // If payload transform option is existing, apply it.\n    // If not, just return payload.\n    return (this.transformPayload && this.transformPayload(payload)) || payload\n}\n\nconst buildSendTxCallbackFunc = (defer, method, payload, isSendTx) => (err, result) => {\n    try {\n        result = method.formatOutput(result)\n    } catch (e) {\n        if (!err) err = e\n    }\n\n    err = (result instanceof Error && result) || err\n\n    // If err exists, fireError\n    if (err) {\n        return utils._fireError(\n            err.error || err, // sometimes, err.error property exists, in case, fire it instead 'err'\n            defer.eventEmitter,\n            defer.reject,\n            payload.callback\n        )\n    }\n\n    // fire callback\n    if (payload.callback) payload.callback(null, result)\n\n    // return PROMISE\n    if (!isSendTx) {\n        defer.resolve(result)\n    } else {\n        defer.eventEmitter.emit('transactionHash', result)\n        method._confirmTransaction(defer, result, payload)\n    }\n}\n\nconst buildSendSignedTxFunc = (method, payload, sendTxCallback) => sign => {\n    const signedPayload = _.extend({}, payload, {\n        method: 'klay_sendRawTransaction',\n        params: [sign.rawTransaction],\n    })\n\n    method.requestManager.send(signedPayload, sendTxCallback)\n}\n\nconst buildSendRequestFunc = (defer, sendSignedTx, sendTxCallback) => (payload, method) => {\n    // Logic for handling multiple cases of parameters in sendSignedTransaction.\n    // 1. Object containing rawTransaction\n    //    : call 'klay_sendRawTransaction' with RLP encoded transaction(rawTransaction) in object\n    // 2. A transaction object containing signatures or feePayerSignatures\n    //    : call 'getRawTransactionWithSignatures', then call 'klay_sendRawTransaction' with result of getRawTransactionWithSignatures\n    if (method && method.accounts && payload.method === 'klay_sendRawTransaction') {\n        const transaction = payload.params[0]\n        if (typeof transaction !== 'string' && _.isObject(transaction)) {\n            if (transaction.rawTransaction) {\n                return sendSignedTx(transaction)\n            }\n            return method.accounts\n                .getRawTransactionWithSignatures(transaction)\n                .then(sendSignedTx)\n                .catch(e => {\n                    sendTxCallback(e)\n                })\n        }\n    }\n\n    if (method && method.accounts && method.accounts.wallet && method.accounts.wallet.length) {\n        switch (payload.method) {\n            case 'klay_sendTransaction': {\n                const tx = payload.params[0]\n\n                let error\n                if (!_.isObject(tx)) {\n                    sendTxCallback(new Error('The transaction must be defined as an object.'))\n                    return\n                }\n\n                let addressToUse = tx.from\n\n                if (tx.senderRawTransaction && tx.feePayer) {\n                    addressToUse = tx.feePayer\n                    if (tx.from) {\n                        console.log('\"from\" is ignored for a fee-delegated transaction.')\n                        delete tx.from\n                    }\n                }\n\n                let wallet\n\n                try {\n                    wallet = method.accounts.wallet.getAccount(addressToUse)\n                } catch (e) {\n                    sendTxCallback(e)\n                    return\n                }\n\n                if (wallet && wallet.privateKey) {\n                    const privateKey = method.accounts._getRoleKey(tx, wallet)\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    return method.accounts\n                        .signTransaction(tx, privateKey)\n                        .then(sendSignedTx)\n                        .catch(e => {\n                            sendTxCallback(e)\n                        })\n                }\n                if (tx.signatures) {\n                    // If signatures is defined inside of the transaction object,\n                    // get rawTransaction string from signed transaction object and send to network\n                    return method.accounts\n                        .getRawTransactionWithSignatures(tx)\n                        .then(sendSignedTx)\n                        .catch(e => {\n                            sendTxCallback(e)\n                        })\n                }\n\n                // If wallet was not found in caver-js wallet, then it has to use wallet in Node.\n                // Signing to transaction using wallet in Node supports only LEGACY transaction, so if transaction is not LEGACY, return error.\n                if (tx.feePayer !== undefined || (tx.type !== undefined && tx.type !== 'LEGACY')) {\n                    error = new Error(\n                        `No private key found in the caver-js wallet. Trying to use the Klaytn node's wallet, but it only supports legacy transactions. Please add private key of ${addressToUse} to the caver-js wallet.`\n                    )\n                    sendTxCallback(error)\n                    return\n                }\n\n                error = validateParams(tx)\n                if (error) {\n                    sendTxCallback(error)\n                    return\n                }\n                break\n            }\n            case 'klay_sign': {\n                const data = payload.params[1]\n                const wallet = method.accounts.wallet.getAccount(payload.params[0])\n\n                if (wallet && wallet.privateKey) {\n                    // If wallet was found, sign tx, and send using sendRawTransaction\n                    const sign = method.accounts.sign(data, wallet.privateKey)\n\n                    if (payload.callback) payload.callback(null, sign.signature)\n\n                    defer.resolve(sign.signature)\n                    return\n                }\n                break\n            }\n        }\n    }\n\n    return method.requestManager.send(payload, sendTxCallback)\n}\n\nconst buildSendFunc = (method, isSendTx) => (...args) => {\n    const defer = utils.promiEvent(!isSendTx)\n    const payload = method.toPayload(args)\n\n    const sendTxCallback = buildSendTxCallbackFunc(defer, method, payload, isSendTx)\n    const sendSignedTx = buildSendSignedTxFunc(method, payload, sendTxCallback)\n    const sendRequest = buildSendRequestFunc(defer, sendSignedTx, sendTxCallback)\n\n    const isGasPriceInputMissing = isSendTx && _.isObject(payload.params[0]) && payload.params[0].gasPrice === undefined\n\n    // If gasPrice input is missing, call getGasPrice rpc\n    if (!isGasPriceInputMissing) {\n        sendRequest(payload, method)\n        return defer.eventEmitter\n    }\n\n    const getGasPrice = new Method({\n        name: 'getGasPrice',\n        call: 'klay_gasPrice',\n        params: 0,\n    }).createFunction(method.requestManager)\n\n    getGasPrice((err, gasPrice) => {\n        payload.params[0].gasPrice = gasPrice || payload.params[0].gasPrice\n        sendRequest(payload, method)\n    })\n\n    /**\n     * attaching `.on('receipt')` is possible by returning defer.eventEmitter\n     */\n    return defer.eventEmitter\n}\n\nfunction buildCall() {\n    const method = this\n    const isSendTx =\n        method.call === 'klay_sendTransaction' ||\n        method.call === 'klay_sendRawTransaction' ||\n        method.call === 'personal_sendTransaction' ||\n        method.call === 'personal_sendValueTransfer' ||\n        method.call === 'personal_sendAccountUpdate'\n\n    const send = buildSendFunc(method, isSendTx)\n    // necessary to attach things to the method\n    send.method = method\n    // necessary for batch requests\n    send.request = this.request.bind(this)\n    return send\n}\n\nfunction _confirmTransaction(defer, result, payload) {\n    const payloadTxObject = (payload.params && _.isObject(payload.params[0]) && payload.params[0]) || {}\n\n    // mutableConfirmationPack will be used in\n    // 1) checkConfirmation,\n    // 2) startWatching functions\n    // It is * mutable *, both functions can affect properties mutably.\n    const mutableConfirmationPack = {\n        method: this,\n        promiseResolved: false,\n        canUnsubscribe: true,\n        timeoutCount: 0,\n        intervalId: null,\n        gasProvided: payloadTxObject.gas || null,\n        isContractDeployment: utils.isContractDeployment(payloadTxObject),\n        defer,\n        result,\n        _klaytnCall: {},\n    }\n\n    addCustomSendMethod(mutableConfirmationPack)\n\n    kickoffConfirmation(mutableConfirmationPack)\n}\n\nconst addCustomSendMethod = mutableConfirmationPack => {\n    const customSendMethods = [\n        new Method({\n            name: 'getTransactionReceipt',\n            call: 'klay_getTransactionReceipt',\n            params: 1,\n            outputFormatter: formatters.outputTransactionReceiptFormatter,\n        }),\n        new Method({\n            name: 'getCode',\n            call: 'klay_getCode',\n            params: 2,\n            inputFormatter: [formatters.inputAddressFormatter, formatters.inputDefaultBlockNumberFormatter],\n        }),\n        new Subscriptions({\n            name: 'subscribe',\n            type: 'klay',\n            subscriptions: {\n                newBlockHeaders: {\n                    subscriptionName: 'newHeads', // replace subscription with this name\n                    params: 0,\n                    outputFormatter: formatters.outputBlockFormatter,\n                },\n            },\n        }),\n    ]\n\n    // add custom send Methods\n    _.each(customSendMethods, mthd => {\n        // attach methods to _klaytnCall\n        mthd.attachToObject(mutableConfirmationPack._klaytnCall)\n        // assign rather than call setRequestManager()\n        mthd.requestManager = mutableConfirmationPack.method.requestManager\n    })\n}\n\nconst kickoffConfirmation = mutableConfirmationPack => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, promiseResolved, result, _klaytnCall } = mutableConfirmationPack\n    // first check if we already have a confirmed transaction\n\n    _klaytnCall\n        .getTransactionReceipt(result)\n        .then(receipt => {\n            if (receipt && receipt.blockHash) {\n                // `isPolling` is false in default.\n                checkConfirmation(mutableConfirmationPack, receipt, false)\n            } else if (!promiseResolved) startWatching(mutableConfirmationPack, receipt)\n        })\n        .catch(() => {\n            if (!promiseResolved) startWatching(mutableConfirmationPack)\n        })\n}\n\n// start watching for confirmation depending on the support features of the provider\nconst startWatching = function(mutableConfirmationPack, existingReceipt) {\n    // eslint-disable-next-line no-unused-vars\n    const { _klaytnCall, intervalId, method } = mutableConfirmationPack\n    // if provider allows PUB/SUB\n    if (method.requestManager.provider.supportsSubscriptions()) {\n        _klaytnCall.subscribe('newBlockHeaders', checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, false))\n    } else {\n        mutableConfirmationPack.intervalId = setInterval(checkConfirmation.bind(null, mutableConfirmationPack, existingReceipt, true), 1000)\n    }\n}\n\n// fire \"receipt\" and confirmation events and resolve after\n\nconst checkConfirmation = function(mutableConfirmationPack, existingReceipt, isPolling, err, blockHeader, sub) {\n    const {\n        // L1\n        intervalId, // eslint-disable-line no-unused-vars\n        defer,\n        method,\n        canUnsubscribe, // eslint-disable-line no-unused-vars\n        _klaytnCall,\n        // L2\n        isContractDeployment,\n        promiseResolved, // eslint-disable-line no-unused-vars\n        timeoutCount, // eslint-disable-line no-unused-vars\n        result,\n    } = mutableConfirmationPack\n\n    if (err) {\n        sub.unsubscribe()\n        mutableConfirmationPack.promiseResolved = true\n        utils._fireError(\n            {\n                message: 'Failed to subscribe to new newBlockHeaders to confirm the transaction receipts.',\n                data: err,\n            },\n            defer.eventEmitter,\n            defer.reject\n        )\n        return\n    }\n\n    // create fake unsubscribe\n    sub = sub || {\n        unsubscribe: () => clearInterval(mutableConfirmationPack.intervalId),\n    }\n\n    // if we have a valid receipt we don't need to send a request\n    return (\n        ((existingReceipt && utils.promiEvent.resolve(existingReceipt)) || _klaytnCall.getTransactionReceipt(result))\n            // if CONFIRMATION listener exists check for confirmations, by setting canUnsubscribe = false\n            .then(receipt => {\n                checkIsReceiptInBlock(receipt)\n\n                const formattedReceipt = formatReceipt(receipt, method)\n\n                if (mutableConfirmationPack.promiseResolved) return\n\n                return isContractDeployment\n                    ? checkForContractDeployment(mutableConfirmationPack, formattedReceipt, sub)\n                    : checkForNormalTx(mutableConfirmationPack, formattedReceipt, sub)\n            })\n            .catch(countTimeout)\n    )\n}\n\nconst checkIsReceiptInBlock = receipt => {\n    if (receipt && !receipt.blockHash) throw errors.blockHashNull\n}\n\nconst formatReceipt = (receipt, method) => {\n    if (method.extraFormatters && method.extraFormatters.receiptFormatter) {\n        receipt = method.extraFormatters.receiptFormatter(receipt)\n    }\n    return receipt\n}\n\nconst countTimeout = (mutableConfirmationPack, isPolling, sub) => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, timeoutCount, promiseResolved } = mutableConfirmationPack\n    // time out the transaction if not mined after 50 blocks\n    mutableConfirmationPack.timeoutCount++\n\n    // check to see if we are http polling\n    if (isPolling) {\n        // polling timeout is different than TIMEOUTBLOCK blocks since we are triggering every second\n        if (mutableConfirmationPack.timeoutCount - 1 >= POLLINGTIMEOUT) {\n            sub.unsubscribe()\n            mutableConfirmationPack.promiseResolved = true\n            utils._fireError(\n                new Error(\n                    `Transaction was not mined within${POLLINGTIMEOUT} seconds, please make sure your transaction was properly sent. Be aware that it might still be mined!`\n                ),\n                defer.eventEmitter,\n                defer.reject\n            )\n        }\n    } else if (mutableConfirmationPack.timeoutCount - 1 >= TIMEOUTBLOCK) {\n        sub.unsubscribe()\n        mutableConfirmationPack.promiseResolved = true\n        utils._fireError(\n            new Error(\n                'Transaction was not mined within 50 blocks, please make sure your transaction was properly sent. Be aware that it might still be mined!'\n            ),\n            defer.eventEmitter,\n            defer.reject\n        )\n    }\n}\n\nconst checkForContractDeployment = (mutableConfirmationPack, receipt, sub) => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, method, canUnsubscribe, _klaytnCall, promiseResolved } = mutableConfirmationPack\n\n    // If contract address doesn't exist, fire error.\n    if (!receipt.contractAddress) {\n        if (canUnsubscribe) {\n            sub.unsubscribe()\n            mutableConfirmationPack.promiseResolved = true\n        }\n\n        utils._fireError(errors.receiptDidntContainContractAddress, defer.eventEmitter, defer.reject)\n        return\n    }\n\n    _klaytnCall.getCode(receipt.contractAddress, (e, code) => {\n        if (!code) return\n\n        if (code.length > 2) {\n            defer.eventEmitter.emit('receipt', receipt)\n\n            // if contract, return instance instead of receipt\n            defer.resolve(\n                (method.extraFormatters &&\n                    method.extraFormatters.contractDeployFormatter &&\n                    method.extraFormatters.contractDeployFormatter(receipt)) ||\n                    receipt\n            )\n\n            // need to remove listeners, as they aren't removed automatically when succesfull\n            if (canUnsubscribe) defer.eventEmitter.removeAllListeners()\n        } else {\n            // code.length <= 2 means, contract code couldn't be stored.\n            utils._fireError(errors.contractCouldntBeStored, defer.eventEmitter, defer.reject)\n        }\n\n        if (canUnsubscribe) sub.unsubscribe()\n        mutableConfirmationPack.promiseResolved = true\n    })\n\n    return receipt\n}\n\nconst checkForNormalTx = (mutableConfirmationPack, receipt, sub) => {\n    // eslint-disable-next-line no-unused-vars\n    const { defer, canUnsubscribe, promiseResolved, gasProvided } = mutableConfirmationPack\n\n    if (\n        receipt &&\n        !receipt.outOfGas &&\n        (!gasProvided || gasProvided !== receipt.gasUsed) &&\n        (receipt.status === true || receipt.status === '0x1' || typeof receipt.status === 'undefined')\n    ) {\n        // Happy case: transaction is processed well. A.K.A 'well-done receipt'.\n        try {\n            mutableConfirmationPack.defer.eventEmitter.emit('receipt', receipt)\n            mutableConfirmationPack.defer.resolve(receipt)\n        } catch (e) {\n            console.log('receipt error', e)\n        }\n\n        // need to remove listeners, as they aren't removed automatically when succesfull\n        if (canUnsubscribe) {\n            mutableConfirmationPack.defer.eventEmitter.removeAllListeners()\n        }\n    } else {\n        // Unhappy case: trasaction has error. A.K.A 'bad receipt'.\n        if (!receipt) return\n        const receiptJSON = JSON.stringify(receipt, null, 2)\n\n        const { txError } = receipt\n        if (txError && errors.txErrorTable[txError]) {\n            utils._fireError(\n                new Error(`${errors.txErrorTable[txError]}\\n ${receiptJSON}`),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        } else if (receipt.status === false || receipt.status === '0x0') {\n            utils._fireError(\n                errors.transactionReverted(receiptJSON),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        } else if (receipt.gasUsed >= gasProvided) {\n            utils._fireError(\n                errors.transactionRanOutOfGas(receiptJSON),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        } else {\n            utils._fireError(\n                errors.transactionRanOutOfGas(receiptJSON),\n                mutableConfirmationPack.defer.eventEmitter,\n                mutableConfirmationPack.defer.reject\n            )\n        }\n    }\n\n    if (canUnsubscribe) sub.unsubscribe()\n    mutableConfirmationPack.promiseResolved = true\n}\n\n/**\n * Should be called to create the pure JSONRPC request which can be used in a batch request\n *\n * @method request\n * @return {Object} jsonrpc request\n */\nfunction request(...args) {\n    const payload = this.toPayload(args)\n    payload.format = this.formatOutput.bind(this)\n    return payload\n}\n\nmodule.exports = Method\n"]},"metadata":{},"sourceType":"script"}